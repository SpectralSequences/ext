var N=null,E="",T="t",U="u",searchIndex={};
var R=["min_degree","result","max_degree","algebraicobjectsbundle","finitemodule","string","error","config","from_vec","with_capacity","rust_ext","vector_container","FpVector2","FpVector3","FpVector5","FpVectorGeneric","vectorcontainer","fpvector","set_slice","clear_slice","set_to_zero","subspace","get_dimension","AdemAlgebra","adembasiselement","ordering","BOCKSTEIN_TABLE","MilnorAlgebra","next_degree","basis_table","basis_element_to_index_map","filtration_one_products","basis_element_from_index","milnorbasiselement","basis_element_to_index","generate_basis_generic","get_beps_pn","multiply","ademalgebra","milnoralgebra","iresult","algebraparsenode","moduleparsenode","hashmap","option","algebra","algebraany","get_name","compute_basis","basis_element_to_string","element_to_string","get_min_degree","quasiinverse","mutexguard","get_image","compute_quasi_inverse","matrix","FiniteDimensionalModule","This function will panic if you call it with input such…","from_json","gen_names","freemoduletableentry","operationgeneratorpair","freemodule","get_matrix","FinitelyPresentedModule","add_generators","module_gens_from_json","gen_idx_to_fp_idx","fp_idx_to_gen_idx","chain_complex","get_algebra","resolution","zero_module","get_module","add_structline","refcell","freemodulehomomorphism","display","try_from","try_into","borrow_mut","type_id","to_string","borrow","typeid","rust_ext::once","rust_ext::fp_vector","to_owned","clone_into","rust_ext::matrix","rust_ext::algebra","rust_ext::adem_algebra","rust_ext::milnor_algebra","into_iter","rust_ext::steenrod_parser","rust_ext::steenrod_evaluator","rust_ext::module","rust_ext::module_homomorphism","rust_ext::finite_dimensional_module","rust_ext::free_module","rust_ext::free_module_homomorphism","rust_ext::finitely_presented_module","rust_ext::chain_complex","rust_ext::resolution","rust_ext::resolution_homomorphism","get_source","get_target","apply_to_basis_element","get_max_kernel_degree","set_quasi_inverse","get_quasi_inverse","get_lock","optionmodule","get_differential","compute_through_bidegree","reduce_limbs","get_vector_container","get_vector_container_mut","get_offset","get_min_index","get_slice","restore_slice","get_min_limb","get_max_limb","get_limbs_cvec","get_limbs_cvec_mut","get_limb_mask","get_entry","set_entry","add_basis_element","get_algebra_type","multiply_basis_elements","multiply_basis_element_by_element","multiply_element_by_basis_element","multiply_element_by_element","get_filtration_one_products","set_default_filtration_one_products","json_to_basis","json_from_basis","get_generators","decompose_basis_element","get_relations_to_check","act_on_basis","act_by_element","generator_list_string","limbbitindexpair","algebrabasiselt","fpvector2","fpvector3","fpvector5","fpvectorgeneric","formatter","index_mut","description","AlgebraicObjectsBundle","ModuleFileNotFoundError","InvalidAlgebraError","OnceBiVec","TempStorage","LimbBitIndexPair","VectorContainer","FpVectorIterator","FpVectorT","QuasiInverse","AlgebraAny","AdemBasisElement","MilnorProfile","MilnorBasisElement","PPartMultiplier","ParseError","AlgebraBasisElt","AlgebraParseNode","ModuleParseNode","UnknownBasisElementError","ZeroModule","UnknownModuleTypeError","ModuleFailedRelationError","FiniteModule","OptionModule","ZeroHomomorphism","ModuleHomomorphism","OperationGeneratorPair","FreeModuleTableEntry","FreeModule","FreeModuleHomomorphism","FPMIndexTable","ChainComplexConcentratedInDegreeZero","ChainComplex","Resolution","ResolutionHomomorphism","DegreeError","Resolve existing resolution to a larger degree","response","on_message","wsresult","ResolutionManager","add_product"];
searchIndex["bivec"]={"doc":E,"i":[[3,"BiVec","bivec","A BiVec is like a Vec, except we allow indices to be…",N,N],[12,"data",E,E,0,N],[12,R[0],E,E,0,N],[11,"new",E,E,0,[[["i32"]],["self"]]],[11,R[8],E,E,0,[[["vec"],["i32"]],["self"]]],[11,R[9],E,E,0,[[["i32"]],["self"]]],[11,R[0],E,E,0,[[["self"]],["i32"]]],[11,R[2],E,"This returns the largest degree in the bivector. This is…",0,[[["self"]],["i32"]]],[11,"len",E,"This returns the \"length\" of the bivector, defined to be…",0,[[["self"]],["i32"]]],[11,"push",E,E,0,[[["self"],[T]]]],[11,"iter",E,E,0,[[["self"]],["iter"]]],[11,"iter_enum",E,E,0,[[["self"]]]],[11,"extend_with",E,"Extends the bivec such that `max_degree()` is at least…",0,[[["self"],["f"],["i32"]]]],[11,"from",E,E,0,[[[T]],[T]]],[11,"into",E,E,0,[[],[U]]],[11,R[88],E,E,0,[[["self"]],[T]]],[11,R[89],E,E,0,[[[T],["self"]]]],[11,R[79],E,E,0,[[[U]],[R[1]]]],[11,R[80],E,E,0,[[],[R[1]]]],[11,R[81],E,E,0,[[["self"]],[T]]],[11,R[84],E,E,0,[[["self"]],[T]]],[11,R[82],E,E,0,[[["self"]],[R[85]]]],[11,"clone",E,E,0,[[["self"]],["bivec"]]],[11,"fmt",E,E,0,[[["self"],[R[152]]],[R[1]]]],[11,"index",E,E,0,[[["self"],["i32"]],[T]]],[11,R[153],E,E,0,[[["self"],["i32"]],[T]]]],"p":[[3,"BiVec"]]};
searchIndex["ext_websocket"]={"doc":E,"i":[[3,R[196],"ext_websocket","ResolutionManager is a struct that manipulates an…",N,N],[12,"sender",E,E,0,N],[12,R[72],E,E,0,N],[3,"Server",E,"The server implements the `ws::Handler` trait. It doesn't…",N,N],[12,"sender",E,E,1,N],[5,"main",E,E,N,[[]]],[17,"FILE_LIST",E,"List of files that our webserver will serve to the user",N,N],[11,"new",E,"Constructs a ResolutionManager object and waits for…",0,[[[R[5]],["receiver",[R[5]]],["sender",[R[5]]]],[[R[1],["box"]],["box",[R[6]]]]]],[11,R[197],E,R[192],0,[[["self"],["value"]],[[R[1],["box"]],["box",[R[6]]]]]],[11,"resolve_further",E,R[192],0,[[["self"],["value"]],[[R[1],["box"]],["box",[R[6]]]]]],[11,"resolve_unit",E,E,0,[[["self"],["value"]],[[R[1],["box"]],["box",[R[6]]]]]],[11,"construct_resolution_json",E,"Resolves a module defined by a json object. The result is…",0,[[["self"],["value"]],[[R[1],["box"]],["box",[R[6]]]]]],[11,"construct_resolution",E,"Resolves a module specified by `json`. The result is…",0,[[["self"],["value"]],[[R[1],["box"]],["box",[R[6]]]]]],[11,"query_table",E,E,0,[[["value"],["self"]],[[R[1],["box"]],["box",[R[6]]]]]],[11,R[72],E,E,0,[[["self"]],["rc"]]],[11,"setup_callback",E,E,0,[[["self"],[R[44]],["str"]]]],[11,"resolve",E,E,0,[[["self"],["i32"]],[[R[1],["box"]],["box",[R[6]]]]]],[11,"new",E,E,1,[[["sender"]],["self"]]],[11,"serve_files",E,E,1,[[["self"],["str"]],[[R[193]],[R[195],[R[193]]]]]],[11,"from",E,E,0,[[[T]],[T]]],[11,"into",E,E,0,[[],[U]]],[11,R[79],E,E,0,[[[U]],[R[1]]]],[11,R[80],E,E,0,[[],[R[1]]]],[11,R[81],E,E,0,[[["self"]],[T]]],[11,R[84],E,E,0,[[["self"]],[T]]],[11,R[82],E,E,0,[[["self"]],[R[85]]]],[11,"from",E,E,1,[[[T]],[T]]],[11,"into",E,E,1,[[],[U]]],[11,R[79],E,E,1,[[[U]],[R[1]]]],[11,R[80],E,E,1,[[],[R[1]]]],[11,R[81],E,E,1,[[["self"]],[T]]],[11,R[84],E,E,1,[[["self"]],[T]]],[11,R[82],E,E,1,[[["self"]],[R[85]]]],[11,R[194],E,E,1,[[["self"],["message"]],[[R[1],[R[6]]],[R[6]]]]],[11,"on_request",E,E,1,[[["self"],["request"]],[[R[193]],[R[195],[R[193]]]]]],[11,R[194],E,E,1,[[["self"],["message"]],[R[195]]]]],"p":[[3,R[196]],[3,"Server"]]};
searchIndex["rust_ext"]={"doc":E,"i":[[3,"Config",R[10],E,N,N],[12,"module_paths",E,E,0,N],[12,"module_file_name",E,E,0,N],[12,"algebra_name",E,E,0,N],[12,R[2],E,E,0,N],[3,R[155],E,E,N,N],[12,R[45],E,E,1,N],[12,"module",E,E,1,N],[12,R[70],E,E,1,N],[12,R[72],E,E,1,N],[3,R[156],E,E,N,N],[12,"name",E,E,2,N],[3,R[157],E,E,N,N],[12,"name",E,E,3,N],[5,"construct",E,E,N,[[[R[7]]],[[R[3],[R[4]]],[R[1],[R[3],"box"]],["box",[R[6]]]]]],[5,"construct_from_json",E,E,N,[[["value"],[R[5]]],[[R[3],[R[4]]],[R[1],[R[3],"box"]],["box",[R[6]]]]]],[5,"construct_algebra_from_json",E,E,N,[[["value"],[R[5]]],[["rc",[R[46]]],[R[1],["rc","box"]],["box",[R[6]]]]]],[5,"run_define_module",E,E,N,[[],[[R[1],[R[5],"box"]],[R[5]],["box",[R[6]]]]]],[5,"run_resolve",E,E,N,[[[R[7]]],[[R[1],[R[5],"box"]],[R[5]],["box",[R[6]]]]]],[5,"run_test",E,E,N,[[]]],[5,"load_module_from_file",E,E,N,[[[R[7]]],[[R[1],[R[5],"box"]],[R[5]],["box",[R[6]]]]]],[0,"once",E,E,N,N],[3,"OnceVec",R[86],E,N,N],[12,"data",E,E,4,N],[3,R[158],E,E,N,N],[12,"data",E,E,5,N],[3,R[159],E,E,N,N],[12,"data",E,E,6,N],[11,R[8],E,E,4,[[["vec"]],["self"]]],[11,"new",E,E,4,[[],["self"]]],[11,R[9],E,E,4,[[["usize"]],["self"]]],[11,"get_vec_mut",E,E,4,[[["self"]],["vec"]]],[11,"get_vec",E,E,4,[[["self"]],["vec"]]],[11,"reserve",E,E,4,[[["self"],["usize"]]]],[11,"reserve_exact",E,E,4,[[["self"],["usize"]]]],[11,"len",E,E,4,[[["self"]],["usize"]]],[11,"get",E,E,4,[[["self"],["usize"]],[T]]],[11,"push",E,E,4,[[["self"],[T]]]],[11,"iter",E,E,4,[[["self"]],["iter"]]],[11,"from_bivec",E,E,5,[[["bivec"]],["self"]]],[11,"new",E,E,5,[[["i32"]],["self"]]],[11,R[9],E,E,5,[[["i32"]],["self"]]],[11,R[2],E,E,5,[[["self"]],["i32"]]],[11,"get_bivec_mut",E,E,5,[[["self"]],["bivec"]]],[11,"get_bivec",E,E,5,[[["self"]],["bivec"]]],[11,"len",E,E,5,[[["self"]],["i32"]]],[11,"push",E,E,5,[[["self"],[T]]]],[11,"iter",E,E,5,[[["self"]],["iter"]]],[11,"new",E,E,6,[[[T]],["self"]]],[11,"take",E,E,6,[[["self"]],[T]]],[0,"combinatorics",R[10],E,N,N],[5,"is_valid_prime","rust_ext::combinatorics",E,N,[[["u32"]],["bool"]]],[5,"inverse",E,E,N,[[["u32"]],["u32"]]],[5,"minus_one_to_the_n",E,E,N,[[["u32"]],["u32"]]],[5,"direct_binomial",E,E,N,[[["u32"]],["u32"]]],[5,"integer_power",E,"Computes b^e.",N,[[["u32"]],["u32"]]],[5,"power_mod",E,"Compute b^e mod p. We use this for computing modulo…",N,[[["u32"]],["u32"]]],[5,"logp",E,E,N,[[["u32"]],["u32"]]],[5,"basep_expansion",E,"Expand n base p and write the result into buffer result.…",N,[[["u32"]]]],[5,"multinomial2",E,E,N,[[],["u32"]]],[5,"binomial2",E,E,N,[[["i32"]],["u32"]]],[5,"multinomial_odd",E,E,N,[[["u32"]],["u32"]]],[5,"binomial_odd",E,E,N,[[["u32"],["i32"]],["u32"]]],[5,"multinomial",E,E,N,[[["u32"]],["u32"]]],[5,"binomial",E,E,N,[[["u32"],["i32"]],["u32"]]],[5,"adem_relation_coefficient",E,E,N,[[["u32"]],["u32"]]],[5,"get_inadmissible_pairs",E,E,N,[[["i32"],["u32"],["bool"]],["vec"]]],[5,"get_tau_degrees",E,E,N,[[["u32"]]]],[5,"get_xi_degrees",E,E,N,[[["u32"]]]],[7,"INVERSE_TABLE",E,E,N,N],[7,"XI_DEGREES",E,E,N,N],[7,"TAU_DEGREES",E,E,N,N],[7,"BINOMIAL_TABLE",E,E,N,N],[17,"MAX_PRIME_INDEX",E,E,N,N],[17,"MAX_PRIME",E,E,N,N],[17,"NOT_A_PRIME",E,E,N,N],[17,"MAX_EXPONENT",E,E,N,N],[17,"MAX_XI_TAU",E,E,N,N],[17,"PRIME_TO_INDEX_MAP",E,E,N,N],[0,"fp_vector",R[10],"An `FpVector` is a vector with entries in Fp. We use this…",N,N],[3,R[160],R[87],E,N,N],[12,"limb",E,E,7,N],[12,"bit_index",E,E,7,N],[3,R[161],E,E,N,N],[12,"dimension",E,E,8,N],[12,"slice_start",E,E,8,N],[12,"slice_end",E,E,8,N],[12,"limbs",E,E,8,N],[3,R[12],E,E,N,N],[12,R[11],E,E,9,N],[3,R[13],E,E,N,N],[12,R[11],E,E,10,N],[3,R[14],E,E,N,N],[12,R[11],E,E,11,N],[3,R[15],E,E,N,N],[12,"p",E,E,12,N],[12,R[11],E,E,12,N],[3,R[162],E,E,N,N],[12,"vect",E,E,13,N],[12,"dim",E,E,13,N],[12,"index",E,E,13,N],[4,"FpVector",E,E,N,N],[13,R[12],E,E,14,N],[13,R[13],E,E,14,N],[13,R[14],E,E,14,N],[13,R[15],E,E,14,N],[5,"get_bit_length",E,E,N,[[["u32"]],["usize"]]],[5,"get_bitmask",E,E,N,[[["u32"]],["u64"]]],[5,"get_entries_per_64_bits",E,E,N,[[["u32"]],["usize"]]],[5,"initialize_limb_bit_index_table",E,E,N,[[["u32"]]]],[5,"get_limb_bit_index_pair",E,E,N,[[["u32"],["usize"]],[R[146]]]],[7,"BIT_LENGHTS",E,E,N,N],[7,"BITMASKS",E,E,N,N],[7,"ENTRIES_PER_64_BITS",E,E,N,N],[7,"LIMB_BIT_INDEX_TABLE",E,"This table tells us which limb and which bitfield of that…",N,N],[7,"LIMB_BIT_INDEX_ONCE_TABLE",E,E,N,N],[17,"MAX_DIMENSION",E,E,N,N],[8,R[163],E,E,N,N],[10,R[116],E,E,15,[[["self"],["usize"]]]],[10,R[117],E,E,15,[[["self"]],[R[16]]]],[10,R[118],E,E,15,[[["self"]],[R[16]]]],[10,"prime",E,E,15,[[["self"]],["u32"]]],[11,R[22],E,E,15,[[["self"]],["usize"]]],[11,R[119],E,E,15,[[["self"]],["usize"]]],[11,R[120],E,E,15,[[["self"]],["usize"]]],[11,R[121],E,E,15,[[["self"]]]],[11,R[18],E,E,15,[[["self"],["usize"]]]],[11,R[122],E,E,15,[[["self"]]]],[11,R[19],E,E,15,[[["self"]]]],[11,R[123],E,E,15,[[["self"]],["usize"]]],[11,R[124],E,E,15,[[["self"]],["usize"]]],[11,R[125],E,E,15,[[["self"]],["vec"]]],[11,R[126],E,E,15,[[["self"]],["vec"]]],[11,R[127],E,E,15,[[["self"],["usize"]],["u64"]]],[11,R[20],E,E,15,[[["self"]]]],[11,"assign",E,E,15,[[["self"],[R[17]]]]],[11,"is_zero",E,E,15,[[["self"]],["bool"]]],[11,R[128],E,E,15,[[["self"],["usize"]],["u32"]]],[11,R[129],E,E,15,[[["self"],["u32"],["usize"]]]],[11,R[130],E,E,15,[[["self"],["u32"],["usize"]]]],[11,"unpack",E,"Unpacks an FpVector onto an array slice. note that the…",15,[[["self"]]]],[11,"pack",E,E,15,[[["self"]]]],[11,"add",E,"Adds `c` * `other` to `self`. `other` must have the same…",15,[[["self"],["u32"],[R[17]]]]],[11,"scale",E,E,15,[[["self"],["u32"]]]],[11,"new",E,E,14,[[["u32"],["usize"]],[R[17]]]],[11,"add_limb",E,E,14,[[["u32"],["u64"]],["u64"]]],[11,"get_number_of_limbs",E,E,14,[[["u32"],["usize"]],["usize"]]],[11,"get_padded_dimension",E,E,14,[[["u32"],["usize"]],["usize"]]],[11,"get_scratch_vector",E,E,14,[[["u32"],["usize"]],["self"]]],[11,"set_scratch_vector_size",E,E,14,[[["usize"]],["self"]]],[11,"iter",E,E,14,[[["self"]],["fpvectoriterator"]]],[11,"pack_limb",E,E,14,[[["u32"],["usize"],["vec"]],["usize"]]],[11,"unpack_limb",E,E,14,[[["u32"],["usize"],["vec"]],["usize"]]],[0,R[56],R[10],E,N,N],[3,"Matrix",R[90],"A matrix! In particular, a matrix with values in F_p. The…",N,N],[12,"p",E,E,16,N],[12,"rows",E,E,16,N],[12,"columns",E,E,16,N],[12,"slice_row_start",E,E,16,N],[12,"slice_row_end",E,E,16,N],[12,"slice_col_start",E,E,16,N],[12,"slice_col_end",E,E,16,N],[12,"vectors",E,E,16,N],[3,"Subspace",E,"A subspace of a vector space. # Fields * `matrix` - A…",N,N],[12,R[56],E,E,17,N],[12,"column_to_pivot_row",E,E,17,N],[3,R[164],E,"Given a matrix M, a quasi-inverse Q is a map from the…",N,N],[12,"image",E,E,18,N],[12,"preimage",E,E,18,N],[11,"new",E,"Produces a new matrix over F_p with the specified number…",16,[[["u32"],["usize"]],[R[56]]]],[11,R[8],E,"Produces a Matrix from an `&[Vec<u32>]` object # Example…",16,[[["u32"]],[R[56]]]],[11,"augmented_from_vec",E,"Produces a padded augmented matrix from an `&[Vec<u32>]`…",16,[[["u32"]]]],[11,"prime",E,E,16,[[["self"]],["u32"]]],[11,"get_rows",E,"Gets the number of rows in the matrix.",16,[[["self"]],["usize"]]],[11,"get_columns",E,"Gets the number of columns in the matrix.",16,[[["self"]],["usize"]]],[11,R[18],E,"Sets the slice on the matrix. Restricts to the submatrix…",16,[[["self"],["usize"]]]],[11,R[19],E,"Un-slice the matrix.",16,[[["self"]]]],[11,"set_row",E,E,16,[[["self"],["usize"],[R[17]]]]],[11,"iter",E,E,16,[[["self"]],[[R[17]],["iter",[R[17]]]]]],[11,"iter_mut",E,E,16,[[["self"]],[[R[17]],["itermut",[R[17]]]]]],[11,"swap_rows",E,E,16,[[["self"],["usize"]]]],[11,"row_op",E,E,16,[[["self"],["u32"],["usize"]]]],[11,"row_reduce",E,"Perform row reduction to reduce it to reduced row echelon…",16,[[["self"],["vec"]]]],[11,"new",E,E,17,[[["u32"],["usize"]],["self"]]],[11,"entire_space",E,E,17,[[["u32"],["usize"]],["self"]]],[11,"add_vector",E,"This adds a vector to the subspace. This function assumes…",17,[[["self"],[R[17]]]]],[11,"reduce",E,"Projects a vector to a complement of the subspace. The…",17,[[["self"],[R[17]]]]],[11,"prime",E,E,18,[[["self"]],["u32"]]],[11,"apply",E,"Apply the quasi-inverse to an input vector and add a…",18,[[["u32"],["self"],[R[17]],[R[17]]]]],[11,R[20],E,E,16,[[["self"]]]],[11,"find_first_row_in_block",E,E,16,[[["self"],["vec"],["usize"]],["usize"]]],[11,"compute_kernel",E,"Computes the kernel from an augmented matrix in rref. To…",16,[[["self"],["vec"],["usize"]],[R[21]]]],[11,R[55],E,"Computes the quasi-inverse of a matrix given a rref of…",16,[[["self"],["vec"],["usize"]],[R[52]]]],[11,"compute_quasi_inverses",E,"This function computes quasi-inverses for matrices A, B…",16,[[["self"],["vec"],["usize"]]]],[11,R[54],E,E,16,[[["self"],["usize"],["vec"]],[R[21]]]],[11,"extend_to_surjection",E,"Given a matrix M in rref, add rows to make the matrix…",16,[[["self"],["usize"],["vec"]],[["usize"],["vec",["usize"]]]]],[11,"extend_image_to_desired_image",E,"Given a matrix in rref, say [A|B|C], where B lies between…",16,[[["self"],["usize"],["vec"],[R[21]]],[["usize"],["vec",["usize"]]]]],[11,"extend_image",E,"Extends the image of a matrix to either the whole…",16,[[["self"],["usize"],["vec"],[R[21]],[R[44],[R[21]]]],[["usize"],["vec",["usize"]]]]],[11,"apply",E,"Applies a matrix to a vector.",16,[[["self"],[R[17]]],[R[17]]]],[0,R[45],R[10],E,N,N],[4,R[165],R[91],E,N,N],[13,R[23],E,E,19,N],[13,R[27],E,E,19,N],[8,"Algebra",E,"A graded algebra over F_p, finite dimensional in each…",N,N],[10,R[131],E,"The \"type\" of the algebra, which is \"adem\" or \"milnor\".…",20,[[["self"]],["str"]]],[10,"prime",E,"Returns the prime the algebra is over.",20,[[["self"]],["u32"]]],[10,R[47],E,E,20,[[["self"]],["str"]]],[10,R[48],E,"Computes the list of basis elements up to degree `degree`.…",20,[[["self"],["i32"]]]],[10,R[22],E,"Gets the dimension of the algebra in degree `degree`.",20,[[["self"],["i32"]],["usize"]]],[10,R[132],E,"Computes the product `r * s` of the two basis elements,…",20,[[["u32"],["usize"],["i32"],["self"],[R[17]]]]],[11,R[133],E,E,20,[[["u32"],["usize"],["i32"],["self"],[R[17]],[R[17]]]]],[11,R[134],E,E,20,[[["u32"],["usize"],["i32"],["self"],[R[17]],[R[17]]]]],[11,R[135],E,E,20,[[["u32"],["i32"],["self"],[R[17]],[R[17]]]]],[10,R[136],E,"A filtration one element in Ext(k, k) is the same as an…",20,[[["self"]],["vec"]]],[10,R[137],E,"Each algebra should come with a list of default filtration…",20,[[["self"]]]],[10,R[138],E,"Converts a JSON object into a basis element. The way basis…",20,[[["value"],["self"]]]],[10,R[139],E,E,20,[[["self"],["usize"],["i32"]],["value"]]],[10,R[49],E,"Converts a basis element into a string for display.",20,[[["self"],["usize"],["i32"]],[R[5]]]],[11,R[50],E,"Converts an element into a string for display.",20,[[["self"],[R[17]],["i32"]],[R[5]]]],[10,R[140],E,"Given a degree `degree`, the function returns a list of…",20,[[["self"],["i32"]],[["usize"],["vec",["usize"]]]]],[10,R[141],E,"Given a non-generator basis element of the algebra,…",20,[[["self"],["usize"],["i32"]],["vec"]]],[10,R[142],E,"Get any relations that the algebra wants checked to ensure…",20,[[["self"],["i32"]],[["vec",["vec"]],["vec"]]]],[0,"adem_algebra",R[10],E,N,N],[3,R[26],R[92],E,N,N],[12,"__private_field",E,E,21,N],[3,R[166],E,"The format of the AdemBasisElement is as follows. To…",N,N],[12,"degree",E,E,22,N],[12,"excess",E,E,22,N],[12,"bocksteins",E,E,22,N],[12,"ps",E,E,22,N],[3,R[23],E,E,N,N],[12,"p",E,E,23,N],[12,"name",E,E,23,N],[12,"generic",E,E,23,N],[12,"unstable",E,E,23,N],[12,R[28],E,E,23,N],[12,"even_basis_table",E,E,23,N],[12,R[29],E,E,23,N],[12,R[30],E,E,23,N],[12,"multiplication_table",E,E,23,N],[12,"excess_table",E,E,23,N],[12,"sort_order",E,E,23,N],[12,R[31],E,E,23,N],[5,"adem_basis_element_excess_sort_order",E,E,N,[[[R[24]]],[R[25]]]],[5,"adem_basis_element_length_sort_order",E,E,N,[[[R[24]]],[R[25]]]],[5,"shift_vec",E,E,N,[[["isize"],["vec"]],["vec"]]],[7,R[26],E,E,N,N],[11,"new",E,E,23,[[["u32"],["bool"]],["self"]]],[11,"generate_basis_even",E,E,23,[[["self"],["i32"]]]],[11,"generate_basis_even_degreen",E,E,23,[[["self"],["i32"]]]],[11,"generate_basis2",E,E,23,[[["self"],["i32"]]]],[11,R[35],E,E,23,[[["self"],["i32"]]]],[11,"generate_basis_generic_degreen",E,E,23,[[["self"],["i32"]]]],[11,"generate_basis_element_to_index_map",E,E,23,[[["self"],["i32"]]]],[11,R[32],E,E,23,[[["self"],["usize"],["i32"]],[R[24]]]],[11,R[34],E,E,23,[[["self"],[R[24]]],["usize"]]],[11,"tail_of_basis_element_to_index",E,E,23,[[["u32"],[R[24]],["self"]]]],[11,"generate_multiplication_table_2",E,E,23,[[["self"],["i32"]]]],[11,"generate_multiplication_table_2_step",E,E,23,[[["vec"],["usize"],["i32"],["self"]],[R[17]]]],[11,"generate_multiplication_table_generic",E,E,23,[[["self"],["i32"]]]],[11,"generate_multiplication_table_generic_step",E,"This function expresses $Sq^x$ (current) in terms of the…",23,[[["vec"],["usize"],["i32"],["self"]],[R[17]]]],[11,R[37],E,E,23,[[["u32"],["usize"],["i32"],["self"],[R[17]]]]],[11,"make_mono_admissible",E,E,23,[[["u32"],["i32"],[R[24]],["self"],[R[17]]]]],[11,"make_mono_admissible_2",E,"Reduce a Steenrod monomial at the prime 2. # Arguments: *…",23,[[["bool"],["i32"],[R[24]],["self"],[R[17]]]]],[11,"make_mono_admissible_generic",E,E,23,[[["bool"],["u32"],["i32"],[R[24]],["self"],[R[17]]]]],[11,"decompose_basis_element_2",E,E,23,[[["self"],["usize"],["i32"]],["vec"]]],[11,"decompose_basis_element_generic",E,E,23,[[["self"],["usize"],["i32"]],["vec"]]],[11,R[36],E,E,23,[[["self"],["u32"]]]],[0,"milnor_algebra",R[10],E,N,N],[3,R[167],R[93],E,N,N],[12,"truncated",E,E,24,N],[12,"q_part",E,E,24,N],[12,"p_part",E,E,24,N],[3,"QPart",E,E,N,N],[12,"degree",E,E,25,N],[12,"q_part",E,E,25,N],[3,R[168],E,E,N,N],[12,"q_part",E,E,26,N],[12,"p_part",E,E,26,N],[12,"degree",E,E,26,N],[3,R[27],E,E,N,N],[12,"profile",E,E,27,N],[12,"name",E,E,27,N],[12,R[28],E,E,27,N],[12,"p",E,E,27,N],[12,"generic",E,E,27,N],[12,"ppart_table",E,E,27,N],[12,"qpart_table",E,E,27,N],[12,R[29],E,E,27,N],[12,R[30],E,E,27,N],[12,R[31],E,E,27,N],[3,R[169],E,E,N,N],[12,"p",E,E,28,N],[12,"M",E,E,28,N],[12,"r",E,E,28,N],[12,"s",E,E,28,N],[12,"rows",E,E,28,N],[12,"cols",E,E,28,N],[12,"diag_num",E,E,28,N],[12,"cont",E,E,28,N],[5,"from_p",E,E,N,[[["u32"],["vec",["u32"]],["i32"]],[R[33]]]],[6,"PPart",E,E,N,N],[17,"ZERO_QPART",E,E,N,N],[11,"new",E,E,27,[[["u32"]],["self"]]],[11,R[32],E,E,27,[[["self"],["usize"],["i32"]],[R[33]]]],[11,R[34],E,E,27,[[["self"],[R[33]]],["usize"]]],[11,"compute_ppart",E,E,27,[[["self"],["i32"]]]],[11,"compute_qpart",E,E,27,[[["self"],["i32"]]]],[11,R[35],E,E,27,[[["self"],["i32"]]]],[11,"generate_basis_2",E,E,27,[[["self"],["i32"]]]],[11,R[36],E,E,27,[[["self"],["u32"]]]],[11,"multiply_qpart",E,E,27,[[["self"],[R[33]],["u32"]],["vec"]]],[11,R[37],E,E,27,[[["u32"],["self"],[R[33]],[R[17]]]]],[11,"new",E,E,28,[[["u32"],["vec"]],["ppartmultiplier"]]],[11,"update",E,E,28,[[["self"]],["bool"]]],[11,"decompose_basis_element_qpart",E,E,27,[[["self"],["usize"],["i32"]],["vec"]]],[11,"decompose_basis_element_ppart",E,E,27,[[["self"],["usize"],["i32"]],["vec"]]],[0,"change_of_basis",R[10],E,N,N],[5,"adem_to_milnor_on_basis","rust_ext::change_of_basis",E,N,[[["u32"],[R[38]],["i32"],["usize"],[R[39]],[R[17]]]]],[5,"adem_to_milnor",E,E,N,[[["u32"],[R[38]],["i32"],[R[39]],[R[17]],[R[17]]]]],[5,"milnor_to_adem_on_basis",E,E,N,[[["u32"],[R[38]],["i32"],["usize"],[R[39]],[R[17]]]]],[5,"milnor_to_adem_on_basis_2",E,E,N,[[["u32"],[R[38]],["i32"],["usize"],[R[39]],[R[17]]]]],[5,"milnor_to_adem_on_basis_generic",E,E,N,[[["u32"],[R[38]],["i32"],["usize"],[R[39]],[R[17]]]]],[5,"milnor_to_adem",E,E,N,[[["u32"],[R[38]],["i32"],[R[39]],[R[17]],[R[17]]]]],[5,"get_adem_q",E,E,N,[[["u32"],[R[38]],[R[39]],[R[17]]]]],[5,"get_adem_plist",E,E,N,[[["u32"],[R[38]],["i32"],["vec",["u32"]],[R[39]],[R[17]]]]],[0,"steenrod_parser",R[10],E,N,N],[3,R[170],R[95],E,N,N],[12,"info",E,E,29,N],[4,R[171],E,E,N,N],[13,"PList",E,E,30,N],[13,"P",E,E,30,N],[13,"Q",E,E,30,N],[4,R[172],E,E,N,N],[13,"Product",E,E,31,N],[13,"Sum",E,E,31,N],[13,"BasisElt",E,E,31,N],[13,"Scalar",E,E,31,N],[4,R[173],E,E,N,N],[13,"Act",E,E,32,N],[13,"Sum",E,E,32,N],[13,"ModuleBasisElt",E,E,32,N],[5,"digits",E,E,N,[[["str"]],[["u32"],[R[40],["str","u32"]],["str"]]]],[5,"integer_list",E,E,N,[[["str"]],[[R[40],["str","vec"]],["vec",["u32"]],["str"]]]],[5,"sequence",E,E,N,[[["str"]],[[R[40],["str","vec"]],["vec",["u32"]],["str"]]]],[5,"algebra_generator",E,E,N,[[["str"]],[[R[41]],[R[40],["str",R[41]]],["str"]]]],[5,"scalar",E,E,N,[[["str"]],[[R[41]],[R[40],["str",R[41]]],["str"]]]],[5,"algebra_parens",E,E,N,[[["str"]],[[R[41]],[R[40],["str",R[41]]],["str"]]]],[5,"algebra_factor",E,E,N,[[["str"]],[[R[41]],[R[40],["str",R[41]]],["str"]]]],[5,"algebra_term",E,E,N,[[["str"]],[[R[41]],[R[40],["str",R[41]]],["str"]]]],[5,"algebra_expr",E,E,N,[[["str"]],[[R[41]],[R[40],["str",R[41]]],["str"]]]],[5,"module_generator",E,E,N,[[["str"]],[[R[42]],[R[40],["str",R[42]]],["str"]]]],[5,"module_parens",E,E,N,[[["str"]],[[R[42]],[R[40],["str",R[42]]],["str"]]]],[5,"module_factor",E,E,N,[[["str"]],[[R[42]],[R[40],["str",R[42]]],["str"]]]],[5,"module_term",E,E,N,[[["str"]],[[R[42]],[R[40],["str",R[42]]],["str"]]]],[5,"module_expr",E,E,N,[[["str"]],[[R[42]],[R[40],["str",R[42]]],["str"]]]],[5,"parse_algebra",E,E,N,[[["str"]],[["box",[R[6]]],[R[1],[R[41],"box"]],[R[41]]]]],[5,"parse_module",E,E,N,[[["str"]],[["box",[R[6]]],[R[42]],[R[1],[R[42],"box"]]]]],[0,"steenrod_evaluator",R[10],E,N,N],[3,R[191],R[96],E,N,N],[3,R[174],E,E,N,N],[12,"name",E,E,33,N],[5,"evaluate_algebra",E,E,N,[[[R[39]],[R[38]],["str"]],[[R[1],["box"]],["box",[R[6]]]]]],[5,"evaluate_algebra_tree",E,E,N,[[[R[39]],[R[38]],[R[41]]],[[R[1],["box"]],["box",[R[6]]]]]],[5,"evaluate_algebra_tree_helper",E,E,N,[[[R[38]],["i32"],[R[39]],[R[44],["i32"]],[R[41]]],[[R[1],["box"]],["box",[R[6]]]]]],[5,"evaluate_basis_element",E,E,N,[[[R[147]],[R[38]],["i32"],[R[39]],[R[44],["i32"]]],[[R[1],["box"]],["box",[R[6]]]]]],[5,"evaluate_module",E,E,N,[[["m"],[R[38]],["str"],[R[39]],[R[43]]],[[R[1],["box"]],["box",[R[6]]]]]],[5,"evaluate_module_tree",E,E,N,[[["m"],[R[42]],[R[38]],[R[39]],[R[43]]],[[R[1],["box"]],["box",[R[6]]]]]],[5,"evaluate_module_tree_helper",E,E,N,[[["m"],[R[42]],[R[38]],["i32"],[R[39]],[R[44],["i32"]],[R[43]]],[[R[1],["box"]],["box",[R[6]]]]]],[5,"evaluate_module_basis_element",E,E,N,[[["m"],[R[5]],[R[38]],["i32"],[R[39]],[R[44],["i32"]],[R[43]]],[[R[1],["box"]],["box",[R[6]]]]]],[0,"module",R[10],E,N,N],[3,R[175],R[97],E,N,N],[12,R[45],E,E,34,N],[12,"name",E,E,34,N],[3,R[176],E,E,N,N],[12,"module_type",E,E,35,N],[3,R[177],E,E,N,N],[12,"relation",E,E,36,N],[12,"value",E,E,36,N],[4,R[178],E,E,N,N],[13,R[57],E,E,37,N],[13,R[65],E,E,37,N],[4,R[179],E,E,N,N],[13,"Some",E,E,38,N],[13,"Zero",E,E,38,N],[8,"Module",E,E,N,N],[11,"prime",E,E,39,[[["self"]],["u32"]]],[10,R[71],E,E,39,[[["self"]],[["rc",[R[46]]],[R[46]]]]],[10,R[47],E,E,39,[[["self"]],["str"]]],[10,R[51],E,E,39,[[["self"]],["i32"]]],[11,R[48],E,E,39,[[["self"],["i32"]]]],[10,R[22],E,E,39,[[["self"],["i32"]],["usize"]]],[10,R[143],E,E,39,[[["u32"],["usize"],["i32"],["self"],[R[17]]]]],[10,R[49],E,E,39,[[["self"],["usize"],["i32"]],[R[5]]]],[11,"act",E,E,39,[[["u32"],["usize"],["i32"],["self"],[R[17]],[R[17]]]]],[11,R[144],E,E,39,[[["u32"],["i32"],["self"],[R[17]],[R[17]]]]],[11,R[145],E,E,39,[[["self"],["i32"]],[R[5]]]],[11,R[50],E,E,39,[[["self"],[R[17]],["i32"]],[R[5]]]],[11,"new",E,E,34,[[["rc",[R[46]]],[R[46]]],["self"]]],[11,R[59],E,E,37,[[["value"],["rc",[R[46]]],[R[46]]],[["box",[R[6]]],[R[1],["box"]]]]],[0,"module_homomorphism",R[10],E,N,N],[3,R[180],R[98],E,N,N],[12,"source",E,E,40,N],[12,"target",E,E,40,N],[12,R[2],E,E,40,N],[8,R[181],E,E,N,N],[10,R[106],E,E,41,[[["self"]],["rc"]]],[10,R[107],E,E,41,[[["self"]],["rc"]]],[11,R[51],E,E,41,[[["self"]],["i32"]]],[10,R[108],E,E,41,[[["u32"],["usize"],["i32"],["self"],[R[17]]]]],[11,"apply",E,E,41,[[["u32"],["i32"],["self"],[R[17]],[R[17]]]]],[11,"prime",E,E,41,[[["self"]],["u32"]]],[10,R[112],E,E,41,[[["self"]],[[R[53],["i32"]],["i32"]]]],[10,R[109],E,E,41,[[["self"]],["i32"]]],[10,R[110],E,E,41,[[["i32"],["self"],[R[52]],[R[53]]]]],[10,R[111],E,E,41,[[["self"],["i32"]],[[R[44],[R[52]]],[R[52]]]]],[11,R[54],E,E,41,[[["self"],["i32"]],[[R[44],[R[21]]],[R[21]]]]],[11,R[55],E,E,41,[[["self"],[R[53]],["i32"]]]],[11,R[64],E,E,41,[[["usize"],["i32"],[R[56]],["self"]]]],[11,"new",E,E,40,[[["rc"],["rc"]],["self"]]],[0,"finite_dimensional_module",R[10],E,N,N],[3,R[57],R[99],E,N,N],[12,R[45],E,E,42,N],[12,"name",E,E,42,N],[12,"graded_dimension",E,E,42,N],[12,R[60],E,E,42,N],[12,"actions",E,E,42,N],[6,"OptionFDModule",E,E,N,N],[11,"new",E,E,42,[[["rc",[R[46]]],[R[46]],[R[5]],["bivec",["usize"]],["usize"]],["self"]]],[11,"set_basis_element_name",E,E,42,[[["self"],[R[5]],["usize"],["i32"]]]],[11,R[67],E,E,42,[[["value"]]]],[11,"allocate_actions",E,E,42,[[["bivec"],["rc"]],[["bivec",["bivec"]],["bivec",["vec"]]]]],[11,"set_action_vector",E,E,42,[[["self"],["usize"],["i32"],[R[17]]]]],[11,"set_action",E,E,42,[[["self"],["u32"],["usize"],["i32"],["vec",["u32"]]]]],[11,"get_action",E,R[58],42,[[["usize"],["i32"],["self"]],[R[17]]]],[11,"get_action_mut",E,R[58],42,[[["self"],["usize"],["i32"]],[R[17]]]],[11,R[59],E,E,42,[[["rc",[R[46]]],[R[46]],["value"]],["self"]]],[11,"check_validity",E,E,42,[[["self"],["i32"]],[[R[1],["box"]],["box",[R[6]]]]]],[11,"extend_actions",E,E,42,[[["self"],["i32"]]]],[11,"actions_to_json",E,E,42,[[["self"]],["value"]]],[0,"free_module",R[10],E,N,N],[3,R[182],R[100],E,N,N],[12,"operation_degree",E,E,43,N],[12,"operation_index",E,E,43,N],[12,"generator_degree",E,E,43,N],[12,"generator_index",E,E,43,N],[3,R[183],E,E,N,N],[12,"num_gens",E,E,44,N],[12,"basis_element_to_opgen",E,E,44,N],[12,"generator_to_index",E,E,44,N],[3,R[184],E,E,N,N],[12,R[45],E,E,45,N],[12,"name",E,E,45,N],[12,R[0],E,E,45,N],[12,R[2],E,E,45,N],[12,R[60],E,E,45,N],[12,"table",E,E,45,N],[11,"new",E,E,45,[[["rc",[R[46]]],[R[46]],[R[5]],["i32"]],["self"]]],[11,"max_computed_degree",E,E,45,[[["self"]],["i32"]]],[11,"get_number_of_gens_in_degree",E,E,45,[[["self"],["i32"]],["usize"]]],[11,"construct_table",E,E,45,[[["self"],["i32"]]]],[11,"get_dimension_with_table",E,E,45,[[[R[61]]],["usize"]]],[11,R[66],E,E,45,[[["vec",[R[5]]],[R[53],["i32"]],["i32"],["usize"],["self"],[R[44],["vec"]],[R[61]]]]],[11,"add_generators_to_table",E,E,45,[[["usize"],[R[61]],["i32"]]]],[11,"operation_generator_to_index",E,E,45,[[["usize"],["i32"],["self"]],["usize"]]],[11,"operation_generator_pair_to_idx",E,E,45,[[["self"],[R[62]]],["usize"]]],[11,"index_to_op_gen",E,E,45,[[["self"],["usize"],["i32"]],[R[62]]]],[11,"element_to_json",E,E,45,[[["self"],[R[17]],["i32"]],["value"]]],[11,"add_generators_immediate",E,E,45,[[["usize"],["i32"],["vec",[R[5]]],["self"],[R[44],["vec"]]]]],[11,"extend_by_zero",E,E,45,[[["self"],["i32"]]]],[0,"free_module_homomorphism",R[10],E,N,N],[3,R[185],R[101],E,N,N],[12,"source",E,E,46,N],[12,"target",E,E,46,N],[12,"outputs",E,E,46,N],[12,"kernel",E,E,46,N],[12,"quasi_inverse",E,E,46,N],[12,R[0],E,E,46,N],[12,R[2],E,E,46,N],[12,"degree_shift",E,E,46,N],[11,"new",E,E,46,[[[R[63]],["i32"],["rc"],["rc",[R[63]]]],["self"]]],[11,R[51],E,E,46,[[["self"]],["i32"]]],[11,"get_output",E,E,46,[[["self"],["usize"],["i32"]],[R[17]]]],[11,"add_generators_from_matrix_rows",E,E,46,[[["usize"],["i32"],[R[56]],["self"],[R[53]]]]],[11,"apply_to_generator",E,E,46,[[["u32"],["usize"],["i32"],["self"],[R[17]]]]],[11,"apply_to_basis_element_with_table",E,E,46,[[[R[61]],["u32"],["usize"],["i32"],["self"],[R[17]]]]],[11,R[64],E,E,46,[[["usize"],["i32"],[R[56]],["self"]]]],[11,"get_matrix_with_table",E,"Arguments * `degree` - The internal degree of the target…",46,[[["usize"],[R[56]],["i32"],["self"],[R[61]]]]],[0,"finitely_presented_module",R[10],E,N,N],[3,R[186],R[102],E,N,N],[12,R[68],E,E,47,N],[12,R[69],E,E,47,N],[3,R[65],E,E,N,N],[12,"name",E,E,48,N],[12,R[0],E,E,48,N],[12,"generators",E,E,48,N],[12,"relations",E,E,48,N],[12,"map",E,E,48,N],[12,"index_table",E,E,48,N],[11,"new",E,E,48,[[["rc",[R[46]]],[R[46]],[R[5]],["i32"]],["self"]]],[11,R[66],E,E,48,[[[R[5]],["vec",[R[5]]],["i32"],["self"]]]],[11,"add_relations",E,E,48,[[[R[56]],["self"],["i32"]]]],[11,R[67],E,E,48,[[["value"]]]],[11,R[59],E,E,48,[[["rc",[R[46]]],[R[46]],["value"]],["self"]]],[11,"relations_to_json",E,E,48,[[["self"]],["value"]]],[11,R[68],E,E,48,[[["self"],["usize"],["i32"]],["isize"]]],[11,R[69],E,E,48,[[["self"],["usize"],["i32"]],["usize"]]],[0,R[70],R[10],E,N,N],[3,R[187],R[103],E,N,N],[12,"module",E,E,49,N],[12,R[73],E,E,49,N],[12,"d0",E,E,49,N],[12,"d1",E,E,49,N],[12,"other_ds",E,E,49,N],[8,R[188],E,E,N,N],[11,"prime",E,E,50,[[["self"]],["u32"]]],[10,R[71],E,E,50,[[["self"]],[["rc",[R[46]]],[R[46]]]]],[10,R[51],E,E,50,[[["self"]],["i32"]]],[10,R[74],E,E,50,[[["self"],["u32"]],["rc"]]],[10,R[114],E,E,50,[[["self"],["u32"]],["f"]]],[10,R[115],E,E,50,[[["self"],["u32"],["i32"]]]],[11,"new",E,E,49,[[["rc"]],["self"]]],[0,R[72],R[10],E,N,N],[3,"Cocycle",R[104],E,N,N],[12,"s",E,E,51,N],[12,T,E,E,51,N],[12,"index",E,E,51,N],[12,"name",E,E,51,N],[3,"SelfMap",E,E,N,N],[12,"s",E,E,52,N],[12,T,E,E,52,N],[12,"name",E,E,52,N],[12,"map_data",E,E,52,N],[12,"map",E,E,52,N],[3,R[189],E,"Fields * `kernels` - For each internal degree, store the…",N,N],[12,"self_",E,E,53,N],[12,"complex",E,E,53,N],[12,"modules",E,E,53,N],[12,R[73],E,E,53,N],[12,"chain_maps",E,E,53,N],[12,"differentials",E,E,53,N],[12,"phantom",E,E,53,N],[12,"kernels",E,E,53,N],[12,"next_s",E,E,53,N],[12,"next_t",E,E,53,N],[12,"add_class",E,E,53,N],[12,R[75],E,E,53,N],[12,"unit_resolution",E,E,53,N],[12,"product_list",E,E,53,N],[12,"chain_maps_to_unit_resolution",E,E,53,N],[12,"max_product_homological_degree",E,E,53,N],[12,"self_maps",E,E,53,N],[6,"ModuleResolution",E,E,N,N],[11,"new",E,E,53,[[[R[44],["box"]],["box",["fn"]],["box",["fn"]],["rc"],[R[44],["box"]]],["self"]]],[11,"get_max_degree",E,E,53,[[["self"]],["i32"]]],[11,"get_max_hom_deg",E,E,53,[[["self"]],["u32"]]],[11,"get_complex",E,E,53,[[["self"]],["rc"]]],[11,R[74],E,E,53,[[["self"],["u32"]],[[R[63]],["rc",[R[63]]]]]],[11,"get_number_of_gens_in_bidegree",E,E,53,[[["self"],["u32"],["i32"]],["usize"]]],[11,"get_chain_map",E,E,53,[[["self"],["u32"]],[R[77]]]],[11,"get_cocycle_string",E,E,53,[[["u32"],["usize"],["i32"],["self"]],[R[5]]]],[11,"set_self",E,"Sets `self.self_`. See struct documentation for more about…",53,[[["self"],[R[76],[R[72]]],["weak",[R[76]]]]]],[11,"extend_through_degree",E,"This function prepares the Resolution object to perform…",53,[[["u32"],["i32"],["self"]]]],[11,"resolve_through_bidegree",E,E,53,[[["self"],["u32"],["i32"]]]],[11,"resolve_through_degree",E,E,53,[[["self"],["i32"]]]],[11,"step",E,E,53,[[["u32"],["i32"],[R[21]],["self"],[R[44],[R[21]]]],[R[21]]]],[11,"compute_filtration_one_products",E,E,53,[[["u32"],["usize"],["i32"],["self"]]]],[11,R[75],E,E,53,[[["u32"],["usize"],["str"],["i32"],["self"]]]],[11,"generate_old_kernel_and_compute_new_kernel",E,"Call our resolution $X$, and the chain complex to resolve…",53,[[["u32"],["i32"],[R[21]],["self"],[R[44],[R[21]]]],[R[21]]]],[11,"graded_dimension_string",E,E,53,[[["self"]],[R[5]]]],[11,R[197],E,E,53,[[["self"],["u32"],["usize"],["i32"],[R[5]]]]],[11,"catch_up_products",E,"This function computes the products between the element…",53,[[["self"]]]],[11,"construct_unit_resolution",E,E,53,[[["self"]]]],[11,"set_unit_resolution",E,E,53,[[["self"],["rc",[R[76]]],[R[76],["moduleresolution"]]]]],[11,"compute_products",E,"Compute products whose result lie in degrees up to (s, t)",53,[[["u32"],["i32"],["self"]]]],[11,"compute_product_step",E,E,53,[[["cocycle"],["u32"],["i32"],["usize"],["self"]]]],[11,"extend_maps_to_unit",E,"This ensures the chain_maps_to_unit_resolution are defined…",53,[[["self"],["u32"],["i32"]]]],[11,"add_self_map",E,E,53,[[["self"],["u32"],[R[5]],["i32"],[R[56]]]]],[11,"compute_self_maps",E,"We compute the products by self maps where the result has…",53,[[["self"],["u32"],["i32"]]]],[0,"resolution_homomorphism",R[10],E,N,N],[3,R[190],R[105],E,N,N],[12,"name",E,E,54,N],[12,"source",E,E,54,N],[12,"target",E,E,54,N],[12,"maps",E,E,54,N],[12,"homological_degree_shift",E,E,54,N],[12,"internal_degree_shift",E,E,54,N],[6,"ResolutionHomomorphismToUnit",E,E,N,N],[11,"new",E,E,54,[[[R[5]],["weak",[R[76]]],["u32"],["i32"],[R[76],[R[72]]],["weak",[R[76]]],[R[76],[R[72]]]],["self"]]],[11,"get_map_ensure_length",E,E,54,[[["self"],["u32"]],[R[77]]]],[11,"get_map",E,E,54,[[["self"],["u32"]],[R[77]]]],[11,"extend",E,"Extend the resolution homomorphism such that it is defined…",54,[[["self"],["u32"],["i32"]]]],[11,"extend_step",E,E,54,[[["u32"],[R[44],[R[56]]],["i32"],[R[56]],["self"]]]],[11,"extend_step_helper",E,E,54,[[["u32"],[R[44],[R[56]]],["i32"],[R[56]],["self"]],[R[56]]]],[0,"cli_module_loaders",R[10],E,N,N],[5,"query","rust_ext::cli_module_loaders",E,N,[[["f"],["str"]],[R[78]]]],[5,"query_with_default",E,E,N,[[[R[78]],["f"],["str"]],[R[78]]]],[5,"query_with_default_no_default_indicated",E,E,N,[[[R[78]],["f"],["str"]],[R[78]]]],[5,"query_yes_no",E,E,N,[[["str"]],["bool"]]],[5,"get_gens",E,E,N,[[["i32"]],[[R[1],["bivec","box"]],["bivec",["vec"]],["box",[R[6]]]]]],[5,"gens_to_json",E,E,N,[[["bivec"]],["value"]]],[5,"get_expression_to_vector",E,E,N,[[[R[17]],["f"],["str"]]]],[5,"interactive_module_define",E,E,N,[[],[[R[1],[R[5],"box"]],[R[5]],["box",[R[6]]]]]],[5,"interactive_module_define_fdmodule",E,E,N,[[["value"],["u32"],["bool"]],[[R[1],["value","box"]],["value"],["box",[R[6]]]]]],[5,"get_relation",E,E,N,[[[R[63]],[R[38]],[R[39]],[R[43]]],[[R[1],[R[5]]],[R[5]]]]],[5,"interactive_module_define_fpmodule",E,E,N,[[["value"],["u32"],["bool"]],[[R[1],["value","box"]],["value"],["box",[R[6]]]]]],[11,"from",R[10],E,0,[[[T]],[T]]],[11,"into",E,E,0,[[],[U]]],[11,R[79],E,E,0,[[[U]],[R[1]]]],[11,R[80],E,E,0,[[],[R[1]]]],[11,R[81],E,E,0,[[["self"]],[T]]],[11,R[84],E,E,0,[[["self"]],[T]]],[11,R[82],E,E,0,[[["self"]],[R[85]]]],[11,"from",E,E,1,[[[T]],[T]]],[11,"into",E,E,1,[[],[U]]],[11,R[79],E,E,1,[[[U]],[R[1]]]],[11,R[80],E,E,1,[[],[R[1]]]],[11,R[81],E,E,1,[[["self"]],[T]]],[11,R[84],E,E,1,[[["self"]],[T]]],[11,R[82],E,E,1,[[["self"]],[R[85]]]],[11,R[83],E,E,2,[[["self"]],[R[5]]]],[11,"from",E,E,2,[[[T]],[T]]],[11,"into",E,E,2,[[],[U]]],[11,R[79],E,E,2,[[[U]],[R[1]]]],[11,R[80],E,E,2,[[],[R[1]]]],[11,R[81],E,E,2,[[["self"]],[T]]],[11,R[84],E,E,2,[[["self"]],[T]]],[11,R[82],E,E,2,[[["self"]],[R[85]]]],[11,R[83],E,E,3,[[["self"]],[R[5]]]],[11,"from",E,E,3,[[[T]],[T]]],[11,"into",E,E,3,[[],[U]]],[11,R[79],E,E,3,[[[U]],[R[1]]]],[11,R[80],E,E,3,[[],[R[1]]]],[11,R[81],E,E,3,[[["self"]],[T]]],[11,R[84],E,E,3,[[["self"]],[T]]],[11,R[82],E,E,3,[[["self"]],[R[85]]]],[11,"from",R[86],E,4,[[[T]],[T]]],[11,"into",E,E,4,[[],[U]]],[11,R[79],E,E,4,[[[U]],[R[1]]]],[11,R[80],E,E,4,[[],[R[1]]]],[11,R[81],E,E,4,[[["self"]],[T]]],[11,R[84],E,E,4,[[["self"]],[T]]],[11,R[82],E,E,4,[[["self"]],[R[85]]]],[11,"from",E,E,5,[[[T]],[T]]],[11,"into",E,E,5,[[],[U]]],[11,R[79],E,E,5,[[[U]],[R[1]]]],[11,R[80],E,E,5,[[],[R[1]]]],[11,R[81],E,E,5,[[["self"]],[T]]],[11,R[84],E,E,5,[[["self"]],[T]]],[11,R[82],E,E,5,[[["self"]],[R[85]]]],[11,"from",E,E,6,[[[T]],[T]]],[11,"into",E,E,6,[[],[U]]],[11,R[79],E,E,6,[[[U]],[R[1]]]],[11,R[80],E,E,6,[[],[R[1]]]],[11,R[81],E,E,6,[[["self"]],[T]]],[11,R[84],E,E,6,[[["self"]],[T]]],[11,R[82],E,E,6,[[["self"]],[R[85]]]],[11,"from",R[87],E,7,[[[T]],[T]]],[11,"into",E,E,7,[[],[U]]],[11,R[88],E,E,7,[[["self"]],[T]]],[11,R[89],E,E,7,[[[T],["self"]]]],[11,R[79],E,E,7,[[[U]],[R[1]]]],[11,R[80],E,E,7,[[],[R[1]]]],[11,R[81],E,E,7,[[["self"]],[T]]],[11,R[84],E,E,7,[[["self"]],[T]]],[11,R[82],E,E,7,[[["self"]],[R[85]]]],[11,"from",E,E,8,[[[T]],[T]]],[11,"into",E,E,8,[[],[U]]],[11,R[88],E,E,8,[[["self"]],[T]]],[11,R[89],E,E,8,[[[T],["self"]]]],[11,R[79],E,E,8,[[[U]],[R[1]]]],[11,R[80],E,E,8,[[],[R[1]]]],[11,R[81],E,E,8,[[["self"]],[T]]],[11,R[84],E,E,8,[[["self"]],[T]]],[11,R[82],E,E,8,[[["self"]],[R[85]]]],[11,"from",E,E,9,[[[T]],[T]]],[11,"into",E,E,9,[[],[U]]],[11,R[88],E,E,9,[[["self"]],[T]]],[11,R[89],E,E,9,[[[T],["self"]]]],[11,R[79],E,E,9,[[[U]],[R[1]]]],[11,R[80],E,E,9,[[],[R[1]]]],[11,R[81],E,E,9,[[["self"]],[T]]],[11,R[84],E,E,9,[[["self"]],[T]]],[11,R[82],E,E,9,[[["self"]],[R[85]]]],[11,"from",E,E,10,[[[T]],[T]]],[11,"into",E,E,10,[[],[U]]],[11,R[88],E,E,10,[[["self"]],[T]]],[11,R[89],E,E,10,[[[T],["self"]]]],[11,R[79],E,E,10,[[[U]],[R[1]]]],[11,R[80],E,E,10,[[],[R[1]]]],[11,R[81],E,E,10,[[["self"]],[T]]],[11,R[84],E,E,10,[[["self"]],[T]]],[11,R[82],E,E,10,[[["self"]],[R[85]]]],[11,"from",E,E,11,[[[T]],[T]]],[11,"into",E,E,11,[[],[U]]],[11,R[88],E,E,11,[[["self"]],[T]]],[11,R[89],E,E,11,[[[T],["self"]]]],[11,R[79],E,E,11,[[[U]],[R[1]]]],[11,R[80],E,E,11,[[],[R[1]]]],[11,R[81],E,E,11,[[["self"]],[T]]],[11,R[84],E,E,11,[[["self"]],[T]]],[11,R[82],E,E,11,[[["self"]],[R[85]]]],[11,"from",E,E,12,[[[T]],[T]]],[11,"into",E,E,12,[[],[U]]],[11,R[88],E,E,12,[[["self"]],[T]]],[11,R[89],E,E,12,[[[T],["self"]]]],[11,R[79],E,E,12,[[[U]],[R[1]]]],[11,R[80],E,E,12,[[],[R[1]]]],[11,R[81],E,E,12,[[["self"]],[T]]],[11,R[84],E,E,12,[[["self"]],[T]]],[11,R[82],E,E,12,[[["self"]],[R[85]]]],[11,"from",E,E,13,[[[T]],[T]]],[11,"into",E,E,13,[[],[U]]],[11,R[94],E,E,13,[[],["i"]]],[11,R[79],E,E,13,[[[U]],[R[1]]]],[11,R[80],E,E,13,[[],[R[1]]]],[11,R[81],E,E,13,[[["self"]],[T]]],[11,R[84],E,E,13,[[["self"]],[T]]],[11,R[82],E,E,13,[[["self"]],[R[85]]]],[11,R[83],E,E,14,[[["self"]],[R[5]]]],[11,"from",E,E,14,[[[T]],[T]]],[11,"into",E,E,14,[[],[U]]],[11,R[88],E,E,14,[[["self"]],[T]]],[11,R[89],E,E,14,[[[T],["self"]]]],[11,R[79],E,E,14,[[[U]],[R[1]]]],[11,R[80],E,E,14,[[],[R[1]]]],[11,R[81],E,E,14,[[["self"]],[T]]],[11,R[84],E,E,14,[[["self"]],[T]]],[11,R[82],E,E,14,[[["self"]],[R[85]]]],[11,R[83],R[90],E,16,[[["self"]],[R[5]]]],[11,"from",E,E,16,[[[T]],[T]]],[11,"into",E,E,16,[[],[U]]],[11,R[88],E,E,16,[[["self"]],[T]]],[11,R[89],E,E,16,[[[T],["self"]]]],[11,R[79],E,E,16,[[[U]],[R[1]]]],[11,R[80],E,E,16,[[],[R[1]]]],[11,R[81],E,E,16,[[["self"]],[T]]],[11,R[84],E,E,16,[[["self"]],[T]]],[11,R[82],E,E,16,[[["self"]],[R[85]]]],[11,"from",E,E,17,[[[T]],[T]]],[11,"into",E,E,17,[[],[U]]],[11,R[88],E,E,17,[[["self"]],[T]]],[11,R[89],E,E,17,[[[T],["self"]]]],[11,R[79],E,E,17,[[[U]],[R[1]]]],[11,R[80],E,E,17,[[],[R[1]]]],[11,R[81],E,E,17,[[["self"]],[T]]],[11,R[84],E,E,17,[[["self"]],[T]]],[11,R[82],E,E,17,[[["self"]],[R[85]]]],[11,"from",E,E,18,[[[T]],[T]]],[11,"into",E,E,18,[[],[U]]],[11,R[79],E,E,18,[[[U]],[R[1]]]],[11,R[80],E,E,18,[[],[R[1]]]],[11,R[81],E,E,18,[[["self"]],[T]]],[11,R[84],E,E,18,[[["self"]],[T]]],[11,R[82],E,E,18,[[["self"]],[R[85]]]],[11,"from",R[91],E,19,[[[T]],[T]]],[11,"into",E,E,19,[[],[U]]],[11,R[79],E,E,19,[[[U]],[R[1]]]],[11,R[80],E,E,19,[[],[R[1]]]],[11,R[81],E,E,19,[[["self"]],[T]]],[11,R[84],E,E,19,[[["self"]],[T]]],[11,R[82],E,E,19,[[["self"]],[R[85]]]],[11,"from",R[92],E,21,[[[T]],[T]]],[11,"into",E,E,21,[[],[U]]],[11,R[79],E,E,21,[[[U]],[R[1]]]],[11,R[80],E,E,21,[[],[R[1]]]],[11,R[81],E,E,21,[[["self"]],[T]]],[11,R[84],E,E,21,[[["self"]],[T]]],[11,R[82],E,E,21,[[["self"]],[R[85]]]],[11,R[83],E,E,22,[[["self"]],[R[5]]]],[11,"from",E,E,22,[[[T]],[T]]],[11,"into",E,E,22,[[],[U]]],[11,R[88],E,E,22,[[["self"]],[T]]],[11,R[89],E,E,22,[[[T],["self"]]]],[11,R[79],E,E,22,[[[U]],[R[1]]]],[11,R[80],E,E,22,[[],[R[1]]]],[11,R[81],E,E,22,[[["self"]],[T]]],[11,R[84],E,E,22,[[["self"]],[T]]],[11,R[82],E,E,22,[[["self"]],[R[85]]]],[11,"from",E,E,23,[[[T]],[T]]],[11,"into",E,E,23,[[],[U]]],[11,R[79],E,E,23,[[[U]],[R[1]]]],[11,R[80],E,E,23,[[],[R[1]]]],[11,R[81],E,E,23,[[["self"]],[T]]],[11,R[84],E,E,23,[[["self"]],[T]]],[11,R[82],E,E,23,[[["self"]],[R[85]]]],[11,"from",R[93],E,24,[[[T]],[T]]],[11,"into",E,E,24,[[],[U]]],[11,R[79],E,E,24,[[[U]],[R[1]]]],[11,R[80],E,E,24,[[],[R[1]]]],[11,R[81],E,E,24,[[["self"]],[T]]],[11,R[84],E,E,24,[[["self"]],[T]]],[11,R[82],E,E,24,[[["self"]],[R[85]]]],[11,"from",E,E,25,[[[T]],[T]]],[11,"into",E,E,25,[[],[U]]],[11,R[88],E,E,25,[[["self"]],[T]]],[11,R[89],E,E,25,[[[T],["self"]]]],[11,R[79],E,E,25,[[[U]],[R[1]]]],[11,R[80],E,E,25,[[],[R[1]]]],[11,R[81],E,E,25,[[["self"]],[T]]],[11,R[84],E,E,25,[[["self"]],[T]]],[11,R[82],E,E,25,[[["self"]],[R[85]]]],[11,R[83],E,E,26,[[["self"]],[R[5]]]],[11,"from",E,E,26,[[[T]],[T]]],[11,"into",E,E,26,[[],[U]]],[11,R[88],E,E,26,[[["self"]],[T]]],[11,R[89],E,E,26,[[[T],["self"]]]],[11,R[79],E,E,26,[[[U]],[R[1]]]],[11,R[80],E,E,26,[[],[R[1]]]],[11,R[81],E,E,26,[[["self"]],[T]]],[11,R[84],E,E,26,[[["self"]],[T]]],[11,R[82],E,E,26,[[["self"]],[R[85]]]],[11,"from",E,E,27,[[[T]],[T]]],[11,"into",E,E,27,[[],[U]]],[11,R[79],E,E,27,[[[U]],[R[1]]]],[11,R[80],E,E,27,[[],[R[1]]]],[11,R[81],E,E,27,[[["self"]],[T]]],[11,R[84],E,E,27,[[["self"]],[T]]],[11,R[82],E,E,27,[[["self"]],[R[85]]]],[11,"from",E,E,28,[[[T]],[T]]],[11,"into",E,E,28,[[],[U]]],[11,R[94],E,E,28,[[],["i"]]],[11,R[79],E,E,28,[[[U]],[R[1]]]],[11,R[80],E,E,28,[[],[R[1]]]],[11,R[81],E,E,28,[[["self"]],[T]]],[11,R[84],E,E,28,[[["self"]],[T]]],[11,R[82],E,E,28,[[["self"]],[R[85]]]],[11,R[83],R[95],E,29,[[["self"]],[R[5]]]],[11,"from",E,E,29,[[[T]],[T]]],[11,"into",E,E,29,[[],[U]]],[11,R[79],E,E,29,[[[U]],[R[1]]]],[11,R[80],E,E,29,[[],[R[1]]]],[11,R[81],E,E,29,[[["self"]],[T]]],[11,R[84],E,E,29,[[["self"]],[T]]],[11,R[82],E,E,29,[[["self"]],[R[85]]]],[11,"from",E,E,30,[[[T]],[T]]],[11,"into",E,E,30,[[],[U]]],[11,R[88],E,E,30,[[["self"]],[T]]],[11,R[89],E,E,30,[[[T],["self"]]]],[11,R[79],E,E,30,[[[U]],[R[1]]]],[11,R[80],E,E,30,[[],[R[1]]]],[11,R[81],E,E,30,[[["self"]],[T]]],[11,R[84],E,E,30,[[["self"]],[T]]],[11,R[82],E,E,30,[[["self"]],[R[85]]]],[11,"from",E,E,31,[[[T]],[T]]],[11,"into",E,E,31,[[],[U]]],[11,R[88],E,E,31,[[["self"]],[T]]],[11,R[89],E,E,31,[[[T],["self"]]]],[11,R[79],E,E,31,[[[U]],[R[1]]]],[11,R[80],E,E,31,[[],[R[1]]]],[11,R[81],E,E,31,[[["self"]],[T]]],[11,R[84],E,E,31,[[["self"]],[T]]],[11,R[82],E,E,31,[[["self"]],[R[85]]]],[11,"from",E,E,32,[[[T]],[T]]],[11,"into",E,E,32,[[],[U]]],[11,R[88],E,E,32,[[["self"]],[T]]],[11,R[89],E,E,32,[[[T],["self"]]]],[11,R[79],E,E,32,[[[U]],[R[1]]]],[11,R[80],E,E,32,[[],[R[1]]]],[11,R[81],E,E,32,[[["self"]],[T]]],[11,R[84],E,E,32,[[["self"]],[T]]],[11,R[82],E,E,32,[[["self"]],[R[85]]]],[11,R[83],R[96],E,55,[[["self"]],[R[5]]]],[11,"from",E,E,55,[[[T]],[T]]],[11,"into",E,E,55,[[],[U]]],[11,R[79],E,E,55,[[[U]],[R[1]]]],[11,R[80],E,E,55,[[],[R[1]]]],[11,R[81],E,E,55,[[["self"]],[T]]],[11,R[84],E,E,55,[[["self"]],[T]]],[11,R[82],E,E,55,[[["self"]],[R[85]]]],[11,R[83],E,E,33,[[["self"]],[R[5]]]],[11,"from",E,E,33,[[[T]],[T]]],[11,"into",E,E,33,[[],[U]]],[11,R[79],E,E,33,[[[U]],[R[1]]]],[11,R[80],E,E,33,[[],[R[1]]]],[11,R[81],E,E,33,[[["self"]],[T]]],[11,R[84],E,E,33,[[["self"]],[T]]],[11,R[82],E,E,33,[[["self"]],[R[85]]]],[11,"from",R[97],E,34,[[[T]],[T]]],[11,"into",E,E,34,[[],[U]]],[11,R[79],E,E,34,[[[U]],[R[1]]]],[11,R[80],E,E,34,[[],[R[1]]]],[11,R[81],E,E,34,[[["self"]],[T]]],[11,R[84],E,E,34,[[["self"]],[T]]],[11,R[82],E,E,34,[[["self"]],[R[85]]]],[11,R[83],E,E,35,[[["self"]],[R[5]]]],[11,"from",E,E,35,[[[T]],[T]]],[11,"into",E,E,35,[[],[U]]],[11,R[79],E,E,35,[[[U]],[R[1]]]],[11,R[80],E,E,35,[[],[R[1]]]],[11,R[81],E,E,35,[[["self"]],[T]]],[11,R[84],E,E,35,[[["self"]],[T]]],[11,R[82],E,E,35,[[["self"]],[R[85]]]],[11,R[83],E,E,36,[[["self"]],[R[5]]]],[11,"from",E,E,36,[[[T]],[T]]],[11,"into",E,E,36,[[],[U]]],[11,R[79],E,E,36,[[[U]],[R[1]]]],[11,R[80],E,E,36,[[],[R[1]]]],[11,R[81],E,E,36,[[["self"]],[T]]],[11,R[84],E,E,36,[[["self"]],[T]]],[11,R[82],E,E,36,[[["self"]],[R[85]]]],[11,"from",E,E,37,[[[T]],[T]]],[11,"into",E,E,37,[[],[U]]],[11,R[79],E,E,37,[[[U]],[R[1]]]],[11,R[80],E,E,37,[[],[R[1]]]],[11,R[81],E,E,37,[[["self"]],[T]]],[11,R[84],E,E,37,[[["self"]],[T]]],[11,R[82],E,E,37,[[["self"]],[R[85]]]],[11,"from",E,E,38,[[[T]],[T]]],[11,"into",E,E,38,[[],[U]]],[11,R[79],E,E,38,[[[U]],[R[1]]]],[11,R[80],E,E,38,[[],[R[1]]]],[11,R[81],E,E,38,[[["self"]],[T]]],[11,R[84],E,E,38,[[["self"]],[T]]],[11,R[82],E,E,38,[[["self"]],[R[85]]]],[11,"from",R[98],E,40,[[[T]],[T]]],[11,"into",E,E,40,[[],[U]]],[11,R[79],E,E,40,[[[U]],[R[1]]]],[11,R[80],E,E,40,[[],[R[1]]]],[11,R[81],E,E,40,[[["self"]],[T]]],[11,R[84],E,E,40,[[["self"]],[T]]],[11,R[82],E,E,40,[[["self"]],[R[85]]]],[11,"from",R[99],E,42,[[[T]],[T]]],[11,"into",E,E,42,[[],[U]]],[11,R[79],E,E,42,[[[U]],[R[1]]]],[11,R[80],E,E,42,[[],[R[1]]]],[11,R[81],E,E,42,[[["self"]],[T]]],[11,R[84],E,E,42,[[["self"]],[T]]],[11,R[82],E,E,42,[[["self"]],[R[85]]]],[11,"from",R[100],E,43,[[[T]],[T]]],[11,"into",E,E,43,[[],[U]]],[11,R[79],E,E,43,[[[U]],[R[1]]]],[11,R[80],E,E,43,[[],[R[1]]]],[11,R[81],E,E,43,[[["self"]],[T]]],[11,R[84],E,E,43,[[["self"]],[T]]],[11,R[82],E,E,43,[[["self"]],[R[85]]]],[11,"from",E,E,44,[[[T]],[T]]],[11,"into",E,E,44,[[],[U]]],[11,R[79],E,E,44,[[[U]],[R[1]]]],[11,R[80],E,E,44,[[],[R[1]]]],[11,R[81],E,E,44,[[["self"]],[T]]],[11,R[84],E,E,44,[[["self"]],[T]]],[11,R[82],E,E,44,[[["self"]],[R[85]]]],[11,"from",E,E,45,[[[T]],[T]]],[11,"into",E,E,45,[[],[U]]],[11,R[79],E,E,45,[[[U]],[R[1]]]],[11,R[80],E,E,45,[[],[R[1]]]],[11,R[81],E,E,45,[[["self"]],[T]]],[11,R[84],E,E,45,[[["self"]],[T]]],[11,R[82],E,E,45,[[["self"]],[R[85]]]],[11,"from",R[101],E,46,[[[T]],[T]]],[11,"into",E,E,46,[[],[U]]],[11,R[79],E,E,46,[[[U]],[R[1]]]],[11,R[80],E,E,46,[[],[R[1]]]],[11,R[81],E,E,46,[[["self"]],[T]]],[11,R[84],E,E,46,[[["self"]],[T]]],[11,R[82],E,E,46,[[["self"]],[R[85]]]],[11,"from",R[102],E,47,[[[T]],[T]]],[11,"into",E,E,47,[[],[U]]],[11,R[79],E,E,47,[[[U]],[R[1]]]],[11,R[80],E,E,47,[[],[R[1]]]],[11,R[81],E,E,47,[[["self"]],[T]]],[11,R[84],E,E,47,[[["self"]],[T]]],[11,R[82],E,E,47,[[["self"]],[R[85]]]],[11,"from",E,E,48,[[[T]],[T]]],[11,"into",E,E,48,[[],[U]]],[11,R[79],E,E,48,[[[U]],[R[1]]]],[11,R[80],E,E,48,[[],[R[1]]]],[11,R[81],E,E,48,[[["self"]],[T]]],[11,R[84],E,E,48,[[["self"]],[T]]],[11,R[82],E,E,48,[[["self"]],[R[85]]]],[11,"from",R[103],E,49,[[[T]],[T]]],[11,"into",E,E,49,[[],[U]]],[11,R[79],E,E,49,[[[U]],[R[1]]]],[11,R[80],E,E,49,[[],[R[1]]]],[11,R[81],E,E,49,[[["self"]],[T]]],[11,R[84],E,E,49,[[["self"]],[T]]],[11,R[82],E,E,49,[[["self"]],[R[85]]]],[11,"from",R[104],E,51,[[[T]],[T]]],[11,"into",E,E,51,[[],[U]]],[11,R[88],E,E,51,[[["self"]],[T]]],[11,R[89],E,E,51,[[[T],["self"]]]],[11,R[79],E,E,51,[[[U]],[R[1]]]],[11,R[80],E,E,51,[[],[R[1]]]],[11,R[81],E,E,51,[[["self"]],[T]]],[11,R[84],E,E,51,[[["self"]],[T]]],[11,R[82],E,E,51,[[["self"]],[R[85]]]],[11,"from",E,E,52,[[[T]],[T]]],[11,"into",E,E,52,[[],[U]]],[11,R[79],E,E,52,[[[U]],[R[1]]]],[11,R[80],E,E,52,[[],[R[1]]]],[11,R[81],E,E,52,[[["self"]],[T]]],[11,R[84],E,E,52,[[["self"]],[T]]],[11,R[82],E,E,52,[[["self"]],[R[85]]]],[11,"from",E,E,53,[[[T]],[T]]],[11,"into",E,E,53,[[],[U]]],[11,R[79],E,E,53,[[[U]],[R[1]]]],[11,R[80],E,E,53,[[],[R[1]]]],[11,R[81],E,E,53,[[["self"]],[T]]],[11,R[84],E,E,53,[[["self"]],[T]]],[11,R[82],E,E,53,[[["self"]],[R[85]]]],[11,"from",R[105],E,54,[[[T]],[T]]],[11,"into",E,E,54,[[],[U]]],[11,R[79],E,E,54,[[[U]],[R[1]]]],[11,R[80],E,E,54,[[],[R[1]]]],[11,R[81],E,E,54,[[["self"]],[T]]],[11,R[84],E,E,54,[[["self"]],[T]]],[11,R[82],E,E,54,[[["self"]],[R[85]]]],[11,R[106],R[98],E,40,[[["self"]],["rc"]]],[11,R[107],E,E,40,[[["self"]],["rc"]]],[11,R[108],E,E,40,[[["u32"],["usize"],["i32"],["self"],[R[17]]]]],[11,R[112],E,E,40,[[["self"]],[[R[53],["i32"]],["i32"]]]],[11,R[109],E,E,40,[[["self"]],["i32"]]],[11,R[110],E,E,40,[[["i32"],["self"],[R[52]],[R[53]]]]],[11,R[111],E,E,40,[[["self"],["i32"]],[[R[44],[R[52]]],[R[52]]]]],[11,R[106],R[101],E,46,[[["self"]],[[R[63]],["rc",[R[63]]]]]],[11,R[107],E,E,46,[[["self"]],["rc"]]],[11,R[109],E,E,46,[[["self"]],["i32"]]],[11,R[108],E,E,46,[[["u32"],["usize"],["i32"],["self"],[R[17]]]]],[11,R[112],E,E,46,[[["self"]],[[R[53],["i32"]],["i32"]]]],[11,R[110],E,E,46,[[["i32"],["self"],[R[52]],[R[53]]]]],[11,R[111],E,E,46,[[["self"],["i32"]],[[R[44],[R[52]]],[R[52]]]]],[11,R[71],R[103],E,49,[[["self"]],[["rc",[R[46]]],[R[46]]]]],[11,R[74],E,E,49,[[["self"],["u32"]],[["rc",[R[113]]],[R[113]]]]],[11,R[51],E,E,49,[[["self"]],["i32"]]],[11,R[114],E,E,49,[[["self"],["u32"]],["zerohomomorphism"]]],[11,R[115],E,E,49,[[["self"],["u32"],["i32"]]]],[11,R[71],R[104],E,53,[[["self"]],[["rc",[R[46]]],[R[46]]]]],[11,R[74],E,E,53,[[["self"],["u32"]],[[R[63]],["rc",[R[63]]]]]],[11,R[51],E,E,53,[[["self"]],["i32"]]],[11,R[114],E,E,53,[[["self"],["u32"]],[R[77]]]],[11,R[115],E,E,53,[[["self"],["u32"],["i32"]]]],[11,R[116],R[87],E,14,[[["self"],["usize"]]]],[11,R[117],E,E,14,[[["self"]],[R[16]]]],[11,R[118],E,E,14,[[["self"]],[R[16]]]],[11,"prime",E,E,14,[[["self"]],["u32"]]],[11,R[22],E,E,14,[[["self"]],["usize"]]],[11,R[119],E,E,14,[[["self"]],["usize"]]],[11,R[120],E,E,14,[[["self"]],["usize"]]],[11,R[121],E,E,14,[[["self"]]]],[11,R[18],E,E,14,[[["self"],["usize"]]]],[11,R[122],E,E,14,[[["self"]]]],[11,R[19],E,E,14,[[["self"]]]],[11,R[123],E,E,14,[[["self"]],["usize"]]],[11,R[124],E,E,14,[[["self"]],["usize"]]],[11,R[125],E,E,14,[[["self"]],["vec"]]],[11,R[126],E,E,14,[[["self"]],["vec"]]],[11,R[127],E,E,14,[[["self"],["usize"]],["u64"]]],[11,R[20],E,E,14,[[["self"]]]],[11,"assign",E,E,14,[[["self"],[R[17]]]]],[11,"is_zero",E,E,14,[[["self"]],["bool"]]],[11,R[128],E,E,14,[[["self"],["usize"]],["u32"]]],[11,R[129],E,E,14,[[["self"],["u32"],["usize"]]]],[11,R[130],E,E,14,[[["self"],["u32"],["usize"]]]],[11,"unpack",E,E,14,[[["self"]]]],[11,"pack",E,E,14,[[["self"]]]],[11,"add",E,E,14,[[["self"],["u32"],[R[17]]]]],[11,"scale",E,E,14,[[["self"],["u32"]]]],[11,R[116],E,E,9,[[["self"],["usize"]]]],[11,"prime",E,E,9,[[["self"]],["u32"]]],[11,R[117],E,E,9,[[["self"]],[R[16]]]],[11,R[118],E,E,9,[[["self"]],[R[16]]]],[11,R[116],E,E,10,[[["self"],["usize"]]]],[11,"prime",E,E,10,[[["self"]],["u32"]]],[11,R[117],E,E,10,[[["self"]],[R[16]]]],[11,R[118],E,E,10,[[["self"]],[R[16]]]],[11,R[116],E,E,11,[[["self"],["usize"]]]],[11,"prime",E,E,11,[[["self"]],["u32"]]],[11,R[117],E,E,11,[[["self"]],[R[16]]]],[11,R[118],E,E,11,[[["self"]],[R[16]]]],[11,R[116],E,E,12,[[["self"],["usize"]]]],[11,"prime",E,E,12,[[["self"]],["u32"]]],[11,R[117],E,E,12,[[["self"]],[R[16]]]],[11,R[118],E,E,12,[[["self"]],[R[16]]]],[11,R[131],R[91],E,19,[[["self"]],["str"]]],[11,"prime",E,E,19,[[["self"]],["u32"]]],[11,R[47],E,E,19,[[["self"]],["str"]]],[11,R[48],E,E,19,[[["self"],["i32"]]]],[11,R[22],E,E,19,[[["self"],["i32"]],["usize"]]],[11,R[132],E,E,19,[[["u32"],["usize"],["i32"],["self"],[R[17]]]]],[11,R[133],E,E,19,[[["u32"],["usize"],["i32"],["self"],[R[17]],[R[17]]]]],[11,R[134],E,E,19,[[["u32"],["usize"],["i32"],["self"],[R[17]],[R[17]]]]],[11,R[135],E,E,19,[[["u32"],["i32"],["self"],[R[17]],[R[17]]]]],[11,R[136],E,E,19,[[["self"]],["vec"]]],[11,R[137],E,E,19,[[["self"]]]],[11,R[138],E,E,19,[[["value"],["self"]]]],[11,R[139],E,E,19,[[["self"],["usize"],["i32"]],["value"]]],[11,R[49],E,E,19,[[["self"],["usize"],["i32"]],[R[5]]]],[11,R[50],E,E,19,[[["self"],[R[17]],["i32"]],[R[5]]]],[11,R[140],E,E,19,[[["self"],["i32"]],[["usize"],["vec",["usize"]]]]],[11,R[141],E,E,19,[[["self"],["usize"],["i32"]],["vec"]]],[11,R[142],E,E,19,[[["self"],["i32"]],[["vec",["vec"]],["vec"]]]],[11,R[131],R[92],E,23,[[["self"]],["str"]]],[11,"prime",E,E,23,[[["self"]],["u32"]]],[11,R[47],E,E,23,[[["self"]],["str"]]],[11,R[136],E,E,23,[[["self"]],["vec"]]],[11,R[137],E,E,23,[[["self"]]]],[11,R[48],E,E,23,[[["self"],["i32"]]]],[11,R[22],E,E,23,[[["self"],["i32"]],["usize"]]],[11,R[132],E,E,23,[[["u32"],["usize"],["i32"],["self"],[R[17]]]]],[11,R[138],E,E,23,[[["value"],["self"]]]],[11,R[139],E,E,23,[[["self"],["usize"],["i32"]],["value"]]],[11,R[49],E,E,23,[[["self"],["usize"],["i32"]],[R[5]]]],[11,R[140],E,E,23,[[["self"],["i32"]],[["usize"],["vec",["usize"]]]]],[11,R[141],E,E,23,[[["self"],["usize"],["i32"]],["vec"]]],[11,R[142],E,"We return Adem relations $b^2 = 0$, $P^i P^j = \\cdots$ for…",23,[[["self"],["i32"]],[["vec",["vec"]],["vec"]]]],[11,R[131],R[93],E,27,[[["self"]],["str"]]],[11,"prime",E,E,27,[[["self"]],["u32"]]],[11,R[47],E,E,27,[[["self"]],["str"]]],[11,R[136],E,E,27,[[["self"]],["vec"]]],[11,R[137],E,E,27,[[["self"]]]],[11,R[48],E,E,27,[[["self"],["i32"]]]],[11,R[22],E,E,27,[[["self"],["i32"]],["usize"]]],[11,R[132],E,E,27,[[["u32"],["usize"],["i32"],["self"],[R[17]]]]],[11,R[138],E,E,27,[[["value"],["self"]]]],[11,R[139],E,E,27,[[["self"],["usize"],["i32"]],["value"]]],[11,R[49],E,E,27,[[["self"],["usize"],["i32"]],[R[5]]]],[11,R[140],E,"We pick our generators to be Q_0 and all the P(...). This…",27,[[["self"],["i32"]],[["usize"],["vec",["usize"]]]]],[11,R[141],E,E,27,[[["self"],["usize"],["i32"]],["vec"]]],[11,R[142],E,E,27,[[["self"],["i32"]],[["vec",["vec"]],["vec"]]]],[11,R[71],R[97],E,34,[[["self"]],[["rc",[R[46]]],[R[46]]]]],[11,R[47],E,E,34,[[["self"]],["str"]]],[11,R[22],E,E,34,[[["self"],["i32"]],["usize"]]],[11,R[51],E,E,34,[[["self"]],["i32"]]],[11,R[143],E,E,34,[[["u32"],["usize"],["i32"],["self"],[R[17]]]]],[11,R[49],E,E,34,[[["self"],["usize"],["i32"]],[R[5]]]],[11,"prime",E,E,37,[[["self"]],["u32"]]],[11,R[71],E,E,37,[[["self"]],[["rc",[R[46]]],[R[46]]]]],[11,R[47],E,E,37,[[["self"]],["str"]]],[11,R[51],E,E,37,[[["self"]],["i32"]]],[11,R[48],E,E,37,[[["self"],["i32"]]]],[11,R[22],E,E,37,[[["self"],["i32"]],["usize"]]],[11,R[143],E,E,37,[[["u32"],["usize"],["i32"],["self"],[R[17]]]]],[11,R[49],E,E,37,[[["self"],["usize"],["i32"]],[R[5]]]],[11,"act",E,E,37,[[["u32"],["usize"],["i32"],["self"],[R[17]],[R[17]]]]],[11,R[144],E,E,37,[[["u32"],["i32"],["self"],[R[17]],[R[17]]]]],[11,R[145],E,E,37,[[["self"],["i32"]],[R[5]]]],[11,R[50],E,E,37,[[["self"],[R[17]],["i32"]],[R[5]]]],[11,R[71],E,E,38,[[["self"]],[["rc",[R[46]]],[R[46]]]]],[11,R[47],E,E,38,[[["self"]],["str"]]],[11,R[51],E,E,38,[[["self"]],["i32"]]],[11,R[48],E,E,38,[[["self"],["i32"]]]],[11,R[22],E,E,38,[[["self"],["i32"]],["usize"]]],[11,R[143],E,E,38,[[["u32"],["usize"],["i32"],["self"],[R[17]]]]],[11,R[49],E,E,38,[[["self"],["usize"],["i32"]],[R[5]]]],[11,R[47],R[99],E,42,[[["self"]],["str"]]],[11,R[71],E,E,42,[[["self"]],[["rc",[R[46]]],[R[46]]]]],[11,R[51],E,E,42,[[["self"]],["i32"]]],[11,R[48],E,E,42,[[["self"],["i32"]]]],[11,R[22],E,E,42,[[["self"],["i32"]],["usize"]]],[11,R[49],E,E,42,[[["self"],["usize"],["i32"]],[R[5]]]],[11,R[143],E,E,42,[[["u32"],["usize"],["i32"],["self"],[R[17]]]]],[11,R[47],R[100],E,45,[[["self"]],["str"]]],[11,R[71],E,E,45,[[["self"]],[["rc",[R[46]]],[R[46]]]]],[11,R[51],E,E,45,[[["self"]],["i32"]]],[11,R[22],E,E,45,[[["self"],["i32"]],["usize"]]],[11,R[49],E,E,45,[[["self"],["usize"],["i32"]],[R[5]]]],[11,R[143],E,E,45,[[["u32"],["usize"],["i32"],["self"],[R[17]]]]],[11,R[71],R[102],E,48,[[["self"]],[["rc",[R[46]]],[R[46]]]]],[11,R[51],E,E,48,[[["self"]],["i32"]]],[11,R[47],E,E,48,[[["self"]],["str"]]],[11,R[48],E,E,48,[[["self"],["i32"]]]],[11,R[22],E,E,48,[[["self"],["i32"]],["usize"]]],[11,R[143],E,E,48,[[["u32"],["usize"],["i32"],["self"],[R[17]]]]],[11,R[49],E,E,48,[[["self"],["usize"],["i32"]],[R[5]]]],[11,"default",R[93],E,25,[[],["qpart"]]],[11,"next",R[87],E,13,[[["self"]],[R[44]]]],[11,"next",R[93],E,28,[[["self"]],[R[44]]]],[11,"clone",R[87],E,7,[[["self"]],[R[146]]]],[11,"clone",E,E,14,[[["self"]],[R[17]]]],[11,"clone",E,E,8,[[["self"]],[R[16]]]],[11,"clone",E,E,9,[[["self"]],[R[148]]]],[11,"clone",E,E,10,[[["self"]],[R[149]]]],[11,"clone",E,E,11,[[["self"]],[R[150]]]],[11,"clone",E,E,12,[[["self"]],[R[151]]]],[11,"clone",R[90],E,16,[[["self"]],[R[56]]]],[11,"clone",E,E,17,[[["self"]],[R[21]]]],[11,"clone",R[92],E,22,[[["self"]],[R[24]]]],[11,"clone",R[93],E,25,[[["self"]],["qpart"]]],[11,"clone",E,E,26,[[["self"]],[R[33]]]],[11,"clone",R[95],E,30,[[["self"]],[R[147]]]],[11,"clone",E,E,31,[[["self"]],[R[41]]]],[11,"clone",E,E,32,[[["self"]],[R[42]]]],[11,"clone",R[104],E,51,[[["self"]],["cocycle"]]],[11,"from",R[87],E,14,[[[R[148]]],[R[17]]]],[11,"from",E,E,14,[[[R[149]]],[R[17]]]],[11,"from",E,E,14,[[[R[150]]],[R[17]]]],[11,"from",E,E,14,[[[R[151]]],[R[17]]]],[11,"from",R[91],E,19,[[[R[38]]],[R[46]]]],[11,"from",E,E,19,[[[R[39]]],[R[46]]]],[11,"from",R[97],E,37,[[["finitedimensionalmodule"]],[R[4]]]],[11,"from",E,E,37,[[["finitelypresentedmodule"]],[R[4]]]],[11,"assert_receiver_is_total_eq",R[90],E,16,[[["self"]]]],[11,"eq",R[87],E,14,[[["self"]],["bool"]]],[11,"eq",R[90],E,16,[[["self"],[R[56]]],["bool"]]],[11,"ne",E,E,16,[[["self"],[R[56]]],["bool"]]],[11,"eq",R[92],E,22,[[["self"]],["bool"]]],[11,"eq",R[93],E,26,[[["self"]],["bool"]]],[11,"deref_mut",R[90],E,16,[[["self"]]]],[11,"fmt",R[87],E,14,[[["self"],[R[152]]],[R[1]]]],[11,"fmt",E,E,8,[[["self"],[R[152]]],[R[1]]]],[11,"fmt",E,E,9,[[["self"],[R[152]]],[R[1]]]],[11,"fmt",E,E,10,[[["self"],[R[152]]],[R[1]]]],[11,"fmt",E,E,11,[[["self"],[R[152]]],[R[1]]]],[11,"fmt",E,E,12,[[["self"],[R[152]]],[R[1]]]],[11,"fmt",R[90],E,16,[[["self"],[R[152]]],[[R[1],[R[6]]],[R[6]]]]],[11,"fmt",E,E,17,[[["self"],[R[152]]],[R[1]]]],[11,"fmt",E,E,18,[[["self"],[R[152]]],[R[1]]]],[11,"fmt",R[92],E,22,[[["self"],[R[152]]],[R[1]]]],[11,"fmt",R[93],E,26,[[["self"],[R[152]]],[R[1]]]],[11,"fmt",R[95],E,30,[[["self"],[R[152]]],[R[1]]]],[11,"fmt",E,E,31,[[["self"],[R[152]]],[R[1]]]],[11,"fmt",E,E,32,[[["self"],[R[152]]],[R[1]]]],[11,"fmt",E,E,29,[[["self"],[R[152]]],[R[1]]]],[11,"fmt",R[96],E,55,[[["self"],[R[152]]],[R[1]]]],[11,"fmt",E,E,33,[[["self"],[R[152]]],[R[1]]]],[11,"fmt",R[97],E,35,[[["self"],[R[152]]],[R[1]]]],[11,"fmt",E,E,36,[[["self"],[R[152]]],[R[1]]]],[11,"fmt",R[100],E,43,[[["self"],[R[152]]],[R[1]]]],[11,"fmt",R[10],E,2,[[["self"],[R[152]]],[R[1]]]],[11,"fmt",E,E,3,[[["self"],[R[152]]],[R[1]]]],[11,"fmt",R[87],E,14,[[["self"],[R[152]]],[[R[1],[R[6]]],[R[6]]]]],[11,"fmt",R[90],E,16,[[["self"],[R[152]]],[[R[1],[R[6]]],[R[6]]]]],[11,"fmt",R[92],E,22,[[[R[152]],["self"]],[[R[1],[R[6]]],[R[6]]]]],[11,"fmt",R[93],E,26,[[[R[152]],["self"]],[[R[1],[R[6]]],[R[6]]]]],[11,"fmt",R[95],E,29,[[[R[152]],["self"]],[R[1]]]],[11,"fmt",R[96],E,55,[[[R[152]],["self"]],[R[1]]]],[11,"fmt",E,E,33,[[[R[152]],["self"]],[R[1]]]],[11,"fmt",R[97],E,35,[[[R[152]],["self"]],[R[1]]]],[11,"fmt",E,E,36,[[[R[152]],["self"]],[R[1]]]],[11,"fmt",R[10],E,2,[[[R[152]],["self"]],[R[1]]]],[11,"fmt",E,E,3,[[[R[152]],["self"]],[R[1]]]],[11,"deref",R[90],E,16,[[["self"]]]],[11,"deref",R[92],E,21,[[["self"]],["vec"]]],[11,"index",R[86],E,4,[[["self"],["usize"]],[T]]],[11,"index",E,E,4,[[["self"],["u32"]],[T]]],[11,"index",E,E,5,[[["self"],["i32"]],[T]]],[11,"index",R[90],E,16,[[["self"],["usize"]]]],[11,R[153],E,E,16,[[["self"],["usize"]]]],[11,"hash",R[92],E,22,[[["self"],["h"]]]],[11,"hash",R[93],E,26,[[["self"],["h"]]]],[11,R[154],R[95],E,29,[[["self"]],["str"]]],[11,R[154],R[96],E,55,[[["self"]],["str"]]],[11,R[154],E,E,33,[[["self"]],["str"]]],[11,R[154],R[97],E,35,[[["self"]],["str"]]],[11,R[154],E,E,36,[[["self"]],["str"]]],[11,R[154],R[10],E,2,[[["self"]],["str"]]],[11,R[154],E,E,3,[[["self"]],["str"]]],[11,"initialize",R[92],E,21,[[["self"]]]]],"p":[[3,"Config"],[3,R[155]],[3,R[156]],[3,R[157]],[3,"OnceVec"],[3,R[158]],[3,R[159]],[3,R[160]],[3,R[161]],[3,R[12]],[3,R[13]],[3,R[14]],[3,R[15]],[3,R[162]],[4,"FpVector"],[8,R[163]],[3,"Matrix"],[3,"Subspace"],[3,R[164]],[4,R[165]],[8,"Algebra"],[3,R[26]],[3,R[166]],[3,R[23]],[3,R[167]],[3,"QPart"],[3,R[168]],[3,R[27]],[3,R[169]],[3,R[170]],[4,R[171]],[4,R[172]],[4,R[173]],[3,R[174]],[3,R[175]],[3,R[176]],[3,R[177]],[4,R[178]],[4,R[179]],[8,"Module"],[3,R[180]],[8,R[181]],[3,R[57]],[3,R[182]],[3,R[183]],[3,R[184]],[3,R[185]],[3,R[186]],[3,R[65]],[3,R[187]],[8,R[188]],[3,"Cocycle"],[3,"SelfMap"],[3,R[189]],[3,R[190]],[3,R[191]]]};
initSearch(searchIndex);addSearchOptions(searchIndex);