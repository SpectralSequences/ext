var N=null,E="",T="t",U="u",searchIndex={};
var R=["algebraicobjectsbundle","config","result","algebraicobjectsbundlechoice","string","usize","rust_ext","vector_container","FpVector2","FpVector3","FpVector5","FpVectorGeneric","vectorcontainer","fpvector","from_vec","get_prime","set_slice","clear_slice","subspace","get_dimension","adembasiselement","ordering","BOCKSTEIN_TABLE","basis_table","basis_element_to_index_map","generate_basis_generic","milnorbasiselement","multiply","algebra","get_name","compute_basis","basis_element_to_string","element_to_string","max_degree","get_min_degree","quasiinverse","mutexguard","get_image","compute_quasi_inverse","matrix","min_degree","freemoduletableentry","operationgeneratorpair","freemodule","module_gens_from_json","gen_idx_to_fp_idx","fp_idx_to_gen_idx","chain_complex","get_algebra","resolution","zero_module","option","get_max_degree","get_module","freemodulehomomorphism","ademalgebra","fdmodule","new_adem_module","wasmalgebra","to_module","fpmodule","wasmfdmodule","new_ccdz","wasmfpmodule","to_chain_complex","resolve_through_degree","get_cocycle_string","function","graded_dimension_string","to_string","try_from","try_into","borrow_mut","type_id","borrow","typeid","rust_ext::once","rust_ext::fp_vector","rust_ext::matrix","rust_ext::adem_algebra","to_owned","clone_into","rust_ext::milnor_algebra","into_iter","rust_ext::module","rust_ext::module_homomorphism","rust_ext::finite_dimensional_module","rust_ext::free_module","rust_ext::free_module_homomorphism","rust_ext::finitely_presented_module","rust_ext::chain_complex","rust_ext::resolution","rust_ext::resolution_homomorphism","rust_ext::wasm_bindings","return_abi","get_filtration_one_products","multiply_basis_elements","json_to_basis","from_json","act_on_basis","get_source","get_target","apply_to_basis_element","get_max_kernel_degree","set_quasi_inverse","get_quasi_inverse","get_lock","optionmodule","get_differential","compute_through_bidegree","reduce_limbs","get_vector_container","get_vector_container_mut","get_offset","get_min_index","get_slice","restore_slice","get_min_limb","get_max_limb","get_limbs_cvec","get_limbs_cvec_mut","get_limb_mask","set_to_zero","get_entry","set_entry","add_basis_element","limbbitindexpair","formatter","description","from_abi","ref_from_abi","describe","into_abi","is_none","ref_mut_from_abi","InvalidAlgebraError","UnknownModuleType","AlgebraicObjectsBundle","AlgebraicObjectsBundleChoice","LimbBitIndexPair","VectorContainer","FpVectorIterator","FpVectorT","QuasiInverse","AdemBasisElement","AdemAlgebra","MilnorProfile","MilnorBasisElement","MilnorAlgebra","PPartMultiplier","ZeroModule","OptionModule","ZeroHomomorphism","ModuleHomomorphism","FiniteDimensionalModule","OperationGeneratorPair","FreeModuleTableEntry","FreeModule","FreeModuleHomomorphism","FPMIndexTable","FinitelyPresentedModule","ChainComplexConcentratedInDegreeZero","ChainComplex","Resolution","ResolutionHomomorphism","WasmAlgebra","WasmFDModule","WasmFPModule","WasmCCDZFDModule","WasmCCDZFPModule","WasmResolutionCCDZFDModule","WasmResolutionCCDZFPModule"];

searchIndex["rust_ext"]={"doc":E,"i":[[3,R[135],R[6],E,N,N],[12,"name",E,E,0,N],[3,R[136],E,E,N,N],[12,"module_type",E,E,1,N],[3,R[137],E,E,N,N],[12,R[28],E,E,2,N],[12,"module",E,E,2,N],[12,R[47],E,E,2,N],[12,R[49],E,E,2,N],[3,"Config",E,E,N,N],[12,"module_path",E,E,3,N],[12,"algebra_name",E,E,3,N],[12,R[33],E,E,3,N],[4,R[138],E,E,N,N],[13,"FinitelyPresented",E,E,4,N],[13,"FiniteDimensional",E,E,4,N],[5,"construct_helper",E,E,N,[[["value"],[R[1]]],[["box",["error"]],[R[2],[R[0],"box"]],[R[0]]]]],[5,"construct",E,E,N,[[[R[1]]],[[R[2],[R[3],"box"]],[R[3]],["box",["error"]]]]],[5,"test",E,E,N,[[[R[1]]]]],[5,"test_no_config",E,E,N,[[]]],[5,"run",E,E,N,[[[R[1]]],[[R[2],[R[4],"box"]],[R[4]],["box",["error"]]]]],[0,"once",E,E,N,N],[3,"OnceVec",R[76],E,N,N],[12,"data",E,E,5,N],[11,R[14],E,E,5,[[["vec"]],["self"]]],[11,"new",E,E,5,[[],["self"]]],[11,"with_capacity",E,E,5,[[[R[5]]],["self"]]],[11,"get_vec_mut",E,E,5,[[["self"]],["vec"]]],[11,"get_vec",E,E,5,[[["self"]],["vec"]]],[11,"reserve",E,E,5,[[["self"],[R[5]]]]],[11,"reserve_exact",E,E,5,[[["self"],[R[5]]]]],[11,"len",E,E,5,[[["self"]],[R[5]]]],[11,"get",E,E,5,[[["self"],[R[5]]],[T]]],[11,"push",E,E,5,[[["self"],[T]]]],[11,"iter",E,E,5,[[["self"]],["iter"]]],[0,"combinatorics",R[6],E,N,N],[5,"valid_prime_q","rust_ext::combinatorics",E,N,[[["u32"]],["bool"]]],[5,"initialize_prime",E,E,N,[[["u32"]]]],[5,"initialize_inverse_table",E,E,N,[[["u32"]]]],[5,"inverse",E,E,N,[[["u32"]],["u32"]]],[5,"minus_one_to_the_n",E,E,N,[[["u32"]],["u32"]]],[5,"initialize_binomial_table",E,E,N,[[["u32"]]]],[5,"direct_binomial",E,E,N,[[["u32"]],["u32"]]],[5,"integer_power",E,E,N,[[["u32"]],["u32"]]],[5,"power_mod",E,E,N,[[["u32"]],["u32"]]],[5,"logp",E,E,N,[[["u32"]],["u32"]]],[5,"basep_expansion",E,"Expand n base p and write the result into buffer result.…",N,[[["u32"]]]],[5,"multinomial2",E,E,N,[[],["u32"]]],[5,"binomial2",E,E,N,[[["i32"]],["u32"]]],[5,"multinomial_odd",E,E,N,[[["u32"]],["u32"]]],[5,"binomial_odd",E,E,N,[[["u32"],["i32"]],["u32"]]],[5,"multinomial",E,E,N,[[["u32"]],["u32"]]],[5,"binomial",E,E,N,[[["u32"],["i32"]],["u32"]]],[5,"initialize_xi_tau_degrees",E,E,N,[[["u32"]]]],[5,"get_tau_degrees",E,E,N,[[["u32"]]]],[5,"get_xi_degrees",E,E,N,[[["u32"]]]],[7,"INVERSE_TABLE",E,E,N,N],[7,"BINOMIAL_TABLE",E,E,N,N],[7,"XI_DEGREES",E,E,N,N],[7,"TAU_DEGREES",E,E,N,N],[17,"MAX_PRIME_INDEX",E,E,N,N],[17,"MAX_PRIME",E,E,N,N],[17,"NOT_A_PRIME",E,E,N,N],[17,"MAX_EXPONENT",E,E,N,N],[17,"MAX_XI_TAU",E,E,N,N],[17,"PRIME_TO_INDEX_MAP",E,E,N,N],[0,"fp_vector",R[6],E,N,N],[3,R[139],R[77],E,N,N],[12,"limb",E,E,6,N],[12,"bit_index",E,E,6,N],[3,R[140],E,E,N,N],[12,"dimension",E,E,7,N],[12,"offset",E,E,7,N],[12,"slice_start",E,E,7,N],[12,"slice_end",E,E,7,N],[12,"limbs",E,E,7,N],[3,R[8],E,E,N,N],[12,R[7],E,E,8,N],[3,R[9],E,E,N,N],[12,R[7],E,E,9,N],[3,R[10],E,E,N,N],[12,R[7],E,E,10,N],[3,R[11],E,E,N,N],[12,"p",E,E,11,N],[12,R[7],E,E,11,N],[3,R[141],E,E,N,N],[12,"vect",E,E,12,N],[12,"dim",E,E,12,N],[12,"index",E,E,12,N],[4,"FpVector",E,E,N,N],[13,R[8],E,E,13,N],[13,R[9],E,E,13,N],[13,R[10],E,E,13,N],[13,R[11],E,E,13,N],[5,"get_bit_length",E,E,N,[[["u32"]],[R[5]]]],[5,"get_bitmask",E,E,N,[[["u32"]],["u64"]]],[5,"get_entries_per_64_bits",E,E,N,[[["u32"]],[R[5]]]],[5,"initialize_limb_bit_index_table",E,"Called by initializePrime This table tells us which limb…",N,[[["u32"]]]],[5,"get_limb_bit_index_pair",E,E,N,[[["u32"],[R[5]]],[R[126]]]],[7,"BIT_LENGHTS",E,E,N,N],[7,"BITMASKS",E,E,N,N],[7,"ENTRIES_PER_64_BITS",E,E,N,N],[7,"LIMB_BIT_INDEX_TABLE",E,E,N,N],[7,"LIMB_BIT_INDEX_ONCE_TABLE",E,E,N,N],[17,"MAX_DIMENSION",E,E,N,N],[8,R[142],E,E,N,N],[10,R[110],E,E,14,[[["self"],[R[5]]]]],[10,R[111],E,E,14,[[["self"]],[R[12]]]],[10,R[112],E,E,14,[[["self"]],[R[12]]]],[10,R[15],E,E,14,[[["self"]],["u32"]]],[11,R[19],E,E,14,[[["self"]],[R[5]]]],[11,R[113],E,E,14,[[["self"]],[R[5]]]],[11,R[114],E,E,14,[[["self"]],[R[5]]]],[11,R[115],E,E,14,[[["self"]]]],[11,R[16],E,E,14,[[["self"],[R[5]]]]],[11,R[116],E,E,14,[[["self"]]]],[11,R[17],E,E,14,[[["self"]]]],[11,R[117],E,E,14,[[["self"]],[R[5]]]],[11,R[118],E,E,14,[[["self"]],[R[5]]]],[11,R[119],E,E,14,[[["self"]],["vec"]]],[11,R[120],E,E,14,[[["self"]],["vec"]]],[11,R[121],E,E,14,[[["self"],[R[5]]],["u64"]]],[11,R[122],E,E,14,[[["self"]]]],[11,"assign",E,E,14,[[["self"],[R[13]]]]],[11,"is_zero",E,E,14,[[["self"]],["bool"]]],[11,R[123],E,E,14,[[["self"],[R[5]]],["u32"]]],[11,R[124],E,E,14,[[["self"],["u32"],[R[5]]]]],[11,R[125],E,E,14,[[["self"],["u32"],[R[5]]]]],[11,"unpack",E,"Unpacks an FpVector onto an array slice. note that the…",14,[[["self"]]]],[11,"pack",E,E,14,[[["self"]]]],[11,"add",E,E,14,[[["self"],["u32"],[R[13]]]]],[11,"scale",E,E,14,[[["self"],["u32"]]]],[11,"new",E,E,13,[[["u32"],[R[5]]],[R[13]]]],[11,"add_limb",E,E,13,[[["u32"],["u64"]],["u64"]]],[11,"get_number_of_limbs",E,E,13,[[["u32"],[R[5]]],[R[5]]]],[11,"get_padded_dimension",E,E,13,[[["u32"],[R[5]]],[R[5]]]],[11,"iter",E,E,13,[[["self"]],["fpvectoriterator"]]],[11,"pack_limb",E,E,13,[[["u32"],[R[5]],["vec"]],[R[5]]]],[11,"unpack_limb",E,E,13,[[["u32"],[R[5]],["vec"]],[R[5]]]],[0,R[39],R[6],E,N,N],[3,"Matrix",R[78],"A matrix! In particular, a matrix with values in F_p. The…",N,N],[12,"p",E,E,15,N],[12,"rows",E,E,15,N],[12,"columns",E,E,15,N],[12,"slice_row_start",E,E,15,N],[12,"slice_row_end",E,E,15,N],[12,"slice_col_start",E,E,15,N],[12,"slice_col_end",E,E,15,N],[12,"vectors",E,E,15,N],[3,"Subspace",E,"A subspace of a vector space. # Fields * `matrix` - A…",N,N],[12,R[39],E,E,16,N],[12,"column_to_pivot_row",E,E,16,N],[3,R[143],E,"Given a matrix M, a quasi-inverse Q is a map from the…",N,N],[12,"image",E,E,17,N],[12,"preimage",E,E,17,N],[11,"new",E,"Produces a new matrix over F_p with the specified number…",15,[[["u32"],[R[5]]],[R[39]]]],[11,R[14],E,"Produces a Matrix from an `&[Vec<u32>]` object # Example…",15,[[["u32"]],[R[39]]]],[11,R[15],E,E,15,[[["self"]],["u32"]]],[11,"get_rows",E,"Gets the number of rows in the matrix.",15,[[["self"]],[R[5]]]],[11,"get_columns",E,"Gets the number of columns in the matrix.",15,[[["self"]],[R[5]]]],[11,R[16],E,"Sets the slice on the matrix. Restricts to the submatrix…",15,[[["self"],[R[5]]]]],[11,R[17],E,"Un-slice the matrix.",15,[[["self"]]]],[11,"iter",E,E,15,[[["self"]],[["iter",[R[13]]],[R[13]]]]],[11,"iter_mut",E,E,15,[[["self"]],[["itermut",[R[13]]],[R[13]]]]],[11,"swap_rows",E,E,15,[[["self"],[R[5]]]]],[11,"row_op",E,E,15,[[["self"],["u32"],[R[5]]]]],[11,"row_reduce",E,"Perform row reduction to reduce it to reduced row echelon…",15,[[["self"],["vec"]]]],[11,"new",E,E,16,[[["u32"],[R[5]]],["self"]]],[11,"entire_space",E,E,16,[[["u32"],[R[5]]],["self"]]],[11,"reduce",E,"Projects a vector to a complement of the subspace. The…",16,[[["self"],[R[13]]]]],[11,R[15],E,E,17,[[["self"]],["u32"]]],[11,"apply",E,"Apply the quasi-inverse to an in put vector and add a…",17,[[["u32"],[R[13]],[R[13]],["self"]]]],[11,"find_first_row_in_block",E,E,15,[[["self"],["vec"],[R[5]]],[R[5]]]],[11,"compute_kernel",E,"Computes the kernel from an augmented matrix in rref. To…",15,[[["self"],["vec"],[R[5]]],[R[18]]]],[11,R[38],E,"Computes the quasi-inverse of a matrix given a rref of…",15,[[["self"],["vec"],[R[5]]],[R[35]]]],[11,"compute_quasi_inverses",E,"This function computes quasi-inverses for matrices A, B…",15,[[["self"],["vec"],[R[5]]]]],[11,R[37],E,E,15,[[["self"],[R[5]],["vec"]],[R[18]]]],[11,"extend_to_surjection",E,"Given a matrix M in rref, add rows to make the matrix…",15,[[["self"],[R[5]],["vec"]],[[R[5]],["vec",[R[5]]]]]],[11,"extend_image_to_desired_image",E,"Given a matrix in rref, say [A|B|C], where B lies between…",15,[[["self"],[R[18]],[R[5]],["vec"]],[[R[5]],["vec",[R[5]]]]]],[11,"extend_image",E,"Extends the image of a matrix to either the whole…",15,[[["self"],[R[51],[R[18]]],[R[5]],["vec"],[R[18]]],[[R[5]],["vec",[R[5]]]]]],[0,R[28],R[6],E,N,N],[8,"Algebra","rust_ext::algebra","A graded algebra over F_p, finite dimensional in each…",N,N],[10,R[15],E,"Returns the prime the algebra is over.",18,[[["self"]],["u32"]]],[10,R[29],E,E,18,[[["self"]],["str"]]],[10,R[30],E,"Computes the list of basis elements up to degree `degree`.…",18,[[["self"],["i32"]]]],[10,R[19],E,"Gets the dimension of the algebra in degree `degree`.",18,[[["self"],["i32"]],[R[5]]]],[10,R[96],E,"Computes the product `r * s` of the two basis elements,…",18,[[["u32"],[R[13]],["i32"],[R[5]],["self"]]]],[10,R[95],E,E,18,[[["self"]],["vec"]]],[10,R[97],E,"Converts a JSON object into a basis element. The way basis…",18,[[["value"],["self"]]]],[10,R[31],E,"Converts a basis element into a string for display.",18,[[["self"],[R[5]],["i32"]],[R[4]]]],[11,R[32],E,"Converts an element into a string for display.",18,[[[R[13]],["self"],["i32"]],[R[4]]]],[0,"adem_algebra",R[6],E,N,N],[3,R[22],R[79],E,N,N],[12,"__private_field",E,E,19,N],[3,R[144],E,E,N,N],[12,"degree",E,E,20,N],[12,"excess",E,E,20,N],[12,"bocksteins",E,E,20,N],[12,"ps",E,E,20,N],[3,R[145],E,E,N,N],[12,"p",E,E,21,N],[12,"name",E,E,21,N],[12,"generic",E,E,21,N],[12,"unstable",E,E,21,N],[12,"even_basis_table",E,E,21,N],[12,R[23],E,E,21,N],[12,R[24],E,E,21,N],[12,"multiplication_table",E,E,21,N],[12,"excess_table",E,E,21,N],[12,"sort_order",E,E,21,N],[12,"filtration_one_products",E,E,21,N],[5,"adem_basis_element_excess_sort_order",E,E,N,[[[R[20]]],[R[21]]]],[5,"adem_basis_element_length_sort_order",E,E,N,[[[R[20]]],[R[21]]]],[5,"shift_vec",E,E,N,[[["isize"],["vec"]],["vec"]]],[7,R[22],E,E,N,N],[11,"new",E,E,21,[[["u32"],["bool"]],["self"]]],[11,R[52],E,E,21,[[["self"]],["i32"]]],[11,"generate_basis_even",E,E,21,[[["self"],["i32"]]]],[11,"generate_basis_even_degreen",E,E,21,[[["self"],["i32"]]]],[11,"generate_basis2",E,E,21,[[["self"],["i32"]]]],[11,R[25],E,E,21,[[["self"],["i32"]]]],[11,"generate_basis_generic_degreen",E,E,21,[[["self"],["i32"]]]],[11,"generate_basis_element_to_index_map",E,E,21,[[["self"],["i32"]]]],[11,"basis_element_from_index",E,E,21,[[["self"],[R[5]],["i32"]],[R[20]]]],[11,"basis_element_to_index",E,E,21,[[["self"],[R[20]]],[R[5]]]],[11,"tail_of_basis_element_to_index",E,E,21,[[["u32"],["self"],[R[20]]]]],[11,"generate_multiplication_table",E,E,21,[[["self"],["i32"]]]],[11,"generate_multiplication_table_2",E,E,21,[[["self"],["i32"]]]],[11,"generate_multiplication_table2_step",E,E,21,[[[R[5]],["i32"],["self"],["vec"]],[R[13]]]],[11,"generate_multiplication_table_generic",E,E,21,[[["self"],["i32"]]]],[11,"generate_multiplication_table_generic_step",E,E,21,[[[R[5]],["i32"],["self"],["vec"]]]],[11,R[27],E,E,21,[[["u32"],[R[13]],["i32"],[R[5]],["self"]]]],[11,"make_mono_admissible",E,E,21,[[["u32"],[R[13]],["i32"],["self"],[R[20]]]]],[11,"make_mono_admissible_2",E,"Reduce a Steenrod monomial at the prime 2. # Arguments: *…",21,[[[R[13]],["i32"],["self"],[R[20]],["bool"]]]],[11,"make_mono_admissible_generic",E,E,21,[[["u32"],[R[13]],["i32"],["self"],[R[20]],["bool"]]]],[0,"milnor_algebra",R[6],E,N,N],[3,R[146],R[82],E,N,N],[12,"generic",E,E,22,N],[3,"QPart",E,E,N,N],[12,"degree",E,E,23,N],[12,"q_part",E,E,23,N],[3,R[147],E,E,N,N],[12,"q_part",E,E,24,N],[12,"p_part",E,E,24,N],[12,"degree",E,E,24,N],[3,R[148],E,E,N,N],[12,"profile",E,E,25,N],[12,"name",E,E,25,N],[12,"next_degree",E,E,25,N],[12,"p",E,E,25,N],[12,"ppart_table",E,E,25,N],[12,"qpart_table",E,E,25,N],[12,R[23],E,E,25,N],[12,R[24],E,E,25,N],[3,R[149],E,E,N,N],[12,"p",E,E,26,N],[12,"M",E,E,26,N],[12,"r",E,E,26,N],[12,"s",E,E,26,N],[12,"rows",E,E,26,N],[12,"cols",E,E,26,N],[12,"diag_num",E,E,26,N],[12,"cont",E,E,26,N],[5,"from_p",E,E,N,[[["u32"],["vec",["u32"]],["i32"]],[R[26]]]],[6,"PPart",E,E,N,N],[17,"ZERO_QPART",E,E,N,N],[11,"new",E,E,25,[[["u32"]],["self"]]],[11,"compute_ppart",E,E,25,[[["self"],["i32"]]]],[11,"compute_qpart",E,E,25,[[["self"],["i32"]]]],[11,R[25],E,E,25,[[["self"],["i32"]]]],[11,"generate_basis_2",E,E,25,[[["self"],["i32"]]]],[11,"multiply_qpart",E,E,25,[[["self"],[R[26]],["u32"]],["vec"]]],[11,R[27],E,E,25,[[["u32"],[R[13]],["self"],[R[26]]]]],[11,"new",E,E,26,[[["u32"],["vec"]],["ppartmultiplier"]]],[11,"update",E,E,26,[[["self"]],["bool"]]],[0,"module",R[6],E,N,N],[3,R[150],R[84],E,N,N],[12,R[28],E,E,27,N],[12,"name",E,E,27,N],[4,R[151],E,E,N,N],[13,"Some",E,E,28,N],[13,"Zero",E,E,28,N],[8,"Module",E,E,N,N],[11,R[15],E,E,29,[[["self"]],["u32"]]],[10,R[98],E,E,29,[[["value"],["str"],["rc",[R[28]]],[R[28]]],["self"]]],[10,R[48],E,E,29,[[["self"]],[["rc",[R[28]]],[R[28]]]]],[10,R[29],E,E,29,[[["self"]],["str"]]],[10,R[34],E,E,29,[[["self"]],["i32"]]],[11,R[30],E,E,29,[[["self"],["i32"]]]],[10,R[19],E,E,29,[[["self"],["i32"]],[R[5]]]],[10,R[99],E,E,29,[[["u32"],[R[13]],["i32"],[R[5]],["self"]]]],[10,R[31],E,E,29,[[["self"],[R[5]],["i32"]],[R[4]]]],[11,"act",E,E,29,[[["u32"],[R[13]],["i32"],[R[5]],["self"],[R[13]]]]],[11,R[32],E,E,29,[[["self"],[R[13]],["i32"]],[R[4]]]],[11,"new",E,E,27,[[["rc",[R[28]]],[R[28]]],["self"]]],[0,"module_homomorphism",R[6],E,N,N],[3,R[152],R[85],E,N,N],[12,"source",E,E,30,N],[12,"target",E,E,30,N],[12,R[33],E,E,30,N],[8,R[153],E,E,N,N],[10,R[100],E,E,31,[[["self"]],["rc"]]],[10,R[101],E,E,31,[[["self"]],["rc"]]],[11,R[34],E,E,31,[[["self"]],["i32"]]],[10,R[102],E,E,31,[[["u32"],[R[13]],["i32"],[R[5]],["self"]]]],[11,"apply",E,E,31,[[["u32"],[R[13]],["i32"],[R[13]],["self"]]]],[11,R[15],E,E,31,[[["self"]],["u32"]]],[10,R[106],E,E,31,[[["self"]],[[R[36],["i32"]],["i32"]]]],[10,R[103],E,E,31,[[["self"]],["i32"]]],[10,R[104],E,E,31,[[[R[35]],["i32"],["self"],[R[36]]]]],[10,R[105],E,E,31,[[["self"],["i32"]],[[R[51],[R[35]]],[R[35]]]]],[11,R[37],E,E,31,[[["self"],["i32"]],[[R[51],[R[18]]],[R[18]]]]],[11,R[38],E,E,31,[[["self"],[R[36]],["i32"]]]],[11,"get_matrix",E,E,31,[[[R[39]],[R[5]],["i32"],["self"]]]],[11,"new",E,E,30,[[["rc"],["rc"]],["self"]]],[0,"finite_dimensional_module",R[6],E,N,N],[3,R[154],R[86],E,N,N],[12,R[28],E,E,32,N],[12,"name",E,E,32,N],[12,R[40],E,E,32,N],[12,"graded_dimension",E,E,32,N],[12,"actions",E,E,32,N],[6,"OptionFDModule",E,E,N,N],[11,"new",E,E,32,[[[R[4]],[R[5]],[R[28]],["rc",[R[28]]],["i32"],["vec",[R[5]]]],["self"]]],[11,R[44],E,E,32,[[["value"]]]],[11,"allocate_actions",E,E,32,[[["rc"],["vec"],["i32"]],[["vec",["vec"]],["vec",["vec"]]]]],[11,"set_action_vector",E,E,32,[[["self"],[R[5]],["i32"],[R[13]]]]],[11,"set_action",E,E,32,[[["self"],["u32"],[R[5]],["i32"],["vec",["u32"]]]]],[11,"get_action",E,E,32,[[[R[5]],["i32"],["self"]],[R[13]]]],[11,"get_action_mut",E,E,32,[[["self"],[R[5]],["i32"]],[R[13]]]],[0,"free_module",R[6],E,N,N],[3,R[155],R[87],E,N,N],[12,"operation_degree",E,E,33,N],[12,"operation_index",E,E,33,N],[12,"generator_degree",E,E,33,N],[12,"generator_index",E,E,33,N],[3,R[156],E,E,N,N],[12,"num_gens",E,E,34,N],[12,"basis_element_to_opgen",E,E,34,N],[12,"generator_to_index",E,E,34,N],[3,R[157],E,E,N,N],[12,R[28],E,E,35,N],[12,"name",E,E,35,N],[12,R[40],E,E,35,N],[12,R[33],E,E,35,N],[12,"table",E,E,35,N],[11,"new",E,E,35,[[[R[4]],[R[28]],["rc",[R[28]]],["i32"]],["self"]]],[11,"get_number_of_gens_in_degree",E,E,35,[[["self"],["i32"]],[R[5]]]],[11,"construct_table",E,E,35,[[["self"],["i32"]]]],[11,"get_dimension_with_table",E,E,35,[[["self"],[R[41]],["i32"]],[R[5]]]],[11,"add_generators",E,E,35,[[[R[36],["i32"]],["i32"],[R[5]],["self"],[R[41]]]]],[11,"add_generators_to_table",E,E,35,[[[R[41]],[R[5]],["i32"]]]],[11,"operation_generator_to_index",E,E,35,[[[R[5]],["i32"],["self"]],[R[5]]]],[11,"operation_generator_pair_to_idx",E,E,35,[[[R[42]],["self"]],[R[5]]]],[11,"index_to_op_gen",E,E,35,[[["self"],[R[5]],["i32"]],[R[42]]]],[11,"add_generators_immediate",E,E,35,[[["self"],[R[5]],["i32"]]]],[11,"extend_by_zero",E,E,35,[[["self"],["i32"]]]],[0,"free_module_homomorphism",R[6],E,N,N],[3,R[158],R[88],E,N,N],[12,"source",E,E,36,N],[12,"target",E,E,36,N],[12,"outputs",E,E,36,N],[12,"kernel",E,E,36,N],[12,"quasi_inverse",E,E,36,N],[12,R[40],E,E,36,N],[12,R[33],E,E,36,N],[12,"degree_shift",E,E,36,N],[11,"new",E,E,36,[[["i32"],["rc",[R[43]]],[R[43]],["rc"]],["self"]]],[11,R[34],E,E,36,[[["self"]],["i32"]]],[11,"get_output",E,E,36,[[["self"],[R[5]],["i32"]],[R[13]]]],[11,"add_generators_from_matrix_rows",E,E,36,[[[R[39]],[R[5]],["i32"],["self"],[R[36]]]]],[11,"apply_to_generator",E,E,36,[[["u32"],[R[13]],["i32"],[R[5]],["self"]]]],[11,"apply_to_basis_element_with_table",E,E,36,[[["u32"],[R[13]],["i32"],[R[5]],["self"],[R[41]]]]],[11,"get_matrix_with_table",E,E,36,[[[R[39]],[R[5]],["i32"],["self"],[R[41]]]]],[0,"finitely_presented_module",R[6],E,N,N],[3,R[159],R[89],E,N,N],[12,R[45],E,E,37,N],[12,R[46],E,E,37,N],[3,R[160],E,E,N,N],[12,"name",E,E,38,N],[12,R[40],E,E,38,N],[12,"generators",E,E,38,N],[12,"relations",E,E,38,N],[12,"map",E,E,38,N],[12,"index_table",E,E,38,N],[11,"new",E,E,38,[[[R[4]],[R[28]],["rc",[R[28]]],["i32"]],["self"]]],[11,R[44],E,E,38,[[["value"]]]],[11,R[45],E,E,38,[[["self"],[R[5]],["i32"]],["isize"]]],[11,R[46],E,E,38,[[["self"],[R[5]],["i32"]],[R[5]]]],[0,R[47],R[6],E,N,N],[3,R[161],R[90],E,N,N],[12,"module",E,E,39,N],[12,R[50],E,E,39,N],[12,"d0",E,E,39,N],[12,"d1",E,E,39,N],[12,"other_ds",E,E,39,N],[8,R[162],E,E,N,N],[11,R[15],E,E,40,[[["self"]],["u32"]]],[10,R[48],E,E,40,[[["self"]],[["rc",[R[28]]],[R[28]]]]],[10,R[34],E,E,40,[[["self"]],["i32"]]],[10,R[53],E,E,40,[[["self"],["u32"]],["rc"]]],[10,R[108],E,E,40,[[["self"],["u32"]],["f"]]],[10,R[109],E,E,40,[[["self"],["u32"],["i32"]]]],[11,"new",E,E,39,[[["rc"]],["self"]]],[0,R[49],R[6],E,N,N],[3,R[163],R[91],E,N,N],[12,"complex",E,E,41,N],[12,"modules",E,E,41,N],[12,R[50],E,E,41,N],[12,"chain_maps",E,E,41,N],[12,"differentials",E,E,41,N],[12,"phantom",E,E,41,N],[12,R[33],E,E,41,N],[12,"add_class",E,E,41,N],[12,"add_structline",E,E,41,N],[6,"ModuleResolution",E,E,N,N],[11,"new",E,E,41,[[[R[51],["box"]],["box",["fn"]],["i32"],["rc"],["box",["fn"]],[R[51],["box"]]],["self"]]],[11,R[52],E,E,41,[[["self"]],["i32"]]],[11,"get_max_hom_deg",E,E,41,[[["self"]],["u32"]]],[11,"get_complex",E,E,41,[[["self"]],["rc"]]],[11,R[53],E,E,41,[[["self"],["u32"]],[["rc",[R[43]]],[R[43]]]]],[11,"get_chain_map",E,E,41,[[["self"],["u32"]],[R[54]]]],[11,R[66],E,E,41,[[["u32"],[R[5]],["i32"],["self"]],[R[4]]]],[11,R[65],E,E,41,[[["self"],["i32"]]]],[11,"step",E,E,41,[[["u32"],[R[51],[R[18]]],["i32"],[R[18]],["self"]],[R[18]]]],[11,"compute_filtration_one_products",E,E,41,[[["u32"],[R[5]],["i32"],["self"]]]],[11,"generate_old_kernel_and_compute_new_kernel",E,"Call our resolution X, and the chain complex to resolve C.…",41,[[["u32"],[R[51],[R[18]]],["i32"],[R[18]],["self"]],[R[18]]]],[11,R[68],E,E,41,[[["self"]],[R[4]]]],[0,"resolution_homomorphism",R[6],E,N,N],[3,R[164],R[92],E,N,N],[12,"source",E,E,42,N],[12,"target",E,E,42,N],[12,"maps",E,E,42,N],[12,"homological_degree_shift",E,E,42,N],[12,"internal_degree_shift",E,E,42,N],[11,"new",E,E,42,[[["rc",[R[49]]],[R[49]],[R[49]],["u32"],["i32"],["rc",[R[49]]]],["self"]]],[11,"get_map_ensure_length",E,E,42,[[["self"],["u32"]],[R[54]]]],[11,"get_map",E,E,42,[[["self"],["u32"]],[R[54]]]],[11,"extend",E,E,42,[[["self"],["u32"],["i32"]]]],[11,"extend_step",E,E,42,[[["u32"],[R[39]],["i32"],[R[51],[R[39]]],["self"]]]],[11,"extend_step_helper",E,E,42,[[["u32"],[R[39]],["i32"],[R[51],[R[39]]],["self"]],[R[39]]]],[0,"wasm_bindings",R[6],E,N,N],[3,R[165],R[93],E,N,N],[12,"pimpl",E,E,43,N],[3,R[166],E,E,N,N],[12,"pimpl",E,E,44,N],[3,R[167],E,E,N,N],[12,"pimpl",E,E,45,N],[3,R[168],E,E,N,N],[12,"pimpl",E,E,46,N],[3,R[169],E,E,N,N],[12,"pimpl",E,E,47,N],[3,R[170],E,E,N,N],[12,"pimpl",E,E,48,N],[3,R[171],E,E,N,N],[12,"pimpl",E,E,49,N],[11,"new_adem_algebra",E,E,43,[[["i32"],["u32"],["bool"]],["self"]]],[11,R[30],E,E,43,[[["self"],["i32"]]]],[11,"to_adem_algebra",E,E,43,[[["self"]],[[R[55]],["rc",[R[55]]]]]],[11,"free",E,E,43,[[]]],[11,R[57],E,E,44,[[[R[4]],[R[58]]],[R[61]]]],[11,R[59],E,E,44,[[["self"]],[[R[56]],["rc",[R[56]]]]]],[11,"free",E,E,44,[[]]],[11,R[57],E,E,45,[[[R[4]],[R[58]]],[R[63]]]],[11,R[59],E,E,45,[[["self"]],[[R[60]],["rc",[R[60]]]]]],[11,"free",E,E,45,[[]]],[11,R[62],E,E,46,[[[R[61]]],["self"]]],[11,R[64],E,E,46,[[["self"]],[["ccdz",[R[56]]],["rc",["ccdz"]]]]],[11,"free",E,E,46,[[]]],[11,R[62],E,E,47,[[[R[63]]],["self"]]],[11,R[64],E,E,47,[[["self"]],[["ccdz",[R[60]]],["rc",["ccdz"]]]]],[11,"free",E,E,47,[[]]],[11,"new",E,E,48,[[["wasmccdzfdmodule"],[R[67]],["i32"]],["self"]]],[11,R[65],E,E,48,[[["self"],["i32"]]]],[11,R[66],E,E,48,[[["u32"],[R[5]],["i32"],["self"]],[R[4]]]],[11,"free",E,E,48,[[]]],[11,"new",E,E,49,[[[R[67]],["i32"],["wasmccdzfpmodule"]],["self"]]],[11,R[65],E,E,49,[[["self"],["i32"]]]],[11,R[66],E,E,49,[[["u32"],[R[5]],["i32"],["self"]],[R[4]]]],[11,"free",E,E,49,[[]]],[11,R[65],R[6],E,4,[[["self"],["i32"]]]],[11,R[68],E,E,4,[[["self"]],[R[4]]]],[11,R[69],E,E,0,[[["self"]],[R[4]]]],[11,"from",E,E,0,[[[T]],[T]]],[11,"into",E,E,0,[[],[U]]],[11,R[70],E,E,0,[[[U]],[R[2]]]],[11,R[71],E,E,0,[[],[R[2]]]],[11,R[72],E,E,0,[[["self"]],[T]]],[11,R[74],E,E,0,[[["self"]],[T]]],[11,R[73],E,E,0,[[["self"]],[R[75]]]],[11,R[69],E,E,1,[[["self"]],[R[4]]]],[11,"from",E,E,1,[[[T]],[T]]],[11,"into",E,E,1,[[],[U]]],[11,R[70],E,E,1,[[[U]],[R[2]]]],[11,R[71],E,E,1,[[],[R[2]]]],[11,R[72],E,E,1,[[["self"]],[T]]],[11,R[74],E,E,1,[[["self"]],[T]]],[11,R[73],E,E,1,[[["self"]],[R[75]]]],[11,"from",E,E,2,[[[T]],[T]]],[11,"into",E,E,2,[[],[U]]],[11,R[70],E,E,2,[[[U]],[R[2]]]],[11,R[71],E,E,2,[[],[R[2]]]],[11,R[72],E,E,2,[[["self"]],[T]]],[11,R[74],E,E,2,[[["self"]],[T]]],[11,R[73],E,E,2,[[["self"]],[R[75]]]],[11,"from",E,E,3,[[[T]],[T]]],[11,"into",E,E,3,[[],[U]]],[11,R[70],E,E,3,[[[U]],[R[2]]]],[11,R[71],E,E,3,[[],[R[2]]]],[11,R[72],E,E,3,[[["self"]],[T]]],[11,R[74],E,E,3,[[["self"]],[T]]],[11,R[73],E,E,3,[[["self"]],[R[75]]]],[11,"from",E,E,4,[[[T]],[T]]],[11,"into",E,E,4,[[],[U]]],[11,R[70],E,E,4,[[[U]],[R[2]]]],[11,R[71],E,E,4,[[],[R[2]]]],[11,R[72],E,E,4,[[["self"]],[T]]],[11,R[74],E,E,4,[[["self"]],[T]]],[11,R[73],E,E,4,[[["self"]],[R[75]]]],[11,"from",R[76],E,5,[[[T]],[T]]],[11,"into",E,E,5,[[],[U]]],[11,R[70],E,E,5,[[[U]],[R[2]]]],[11,R[71],E,E,5,[[],[R[2]]]],[11,R[72],E,E,5,[[["self"]],[T]]],[11,R[74],E,E,5,[[["self"]],[T]]],[11,R[73],E,E,5,[[["self"]],[R[75]]]],[11,"from",R[77],E,6,[[[T]],[T]]],[11,"into",E,E,6,[[],[U]]],[11,R[80],E,E,6,[[["self"]],[T]]],[11,R[81],E,E,6,[[[T],["self"]]]],[11,R[70],E,E,6,[[[U]],[R[2]]]],[11,R[71],E,E,6,[[],[R[2]]]],[11,R[72],E,E,6,[[["self"]],[T]]],[11,R[74],E,E,6,[[["self"]],[T]]],[11,R[73],E,E,6,[[["self"]],[R[75]]]],[11,"from",E,E,7,[[[T]],[T]]],[11,"into",E,E,7,[[],[U]]],[11,R[70],E,E,7,[[[U]],[R[2]]]],[11,R[71],E,E,7,[[],[R[2]]]],[11,R[72],E,E,7,[[["self"]],[T]]],[11,R[74],E,E,7,[[["self"]],[T]]],[11,R[73],E,E,7,[[["self"]],[R[75]]]],[11,"from",E,E,8,[[[T]],[T]]],[11,"into",E,E,8,[[],[U]]],[11,R[70],E,E,8,[[[U]],[R[2]]]],[11,R[71],E,E,8,[[],[R[2]]]],[11,R[72],E,E,8,[[["self"]],[T]]],[11,R[74],E,E,8,[[["self"]],[T]]],[11,R[73],E,E,8,[[["self"]],[R[75]]]],[11,"from",E,E,9,[[[T]],[T]]],[11,"into",E,E,9,[[],[U]]],[11,R[70],E,E,9,[[[U]],[R[2]]]],[11,R[71],E,E,9,[[],[R[2]]]],[11,R[72],E,E,9,[[["self"]],[T]]],[11,R[74],E,E,9,[[["self"]],[T]]],[11,R[73],E,E,9,[[["self"]],[R[75]]]],[11,"from",E,E,10,[[[T]],[T]]],[11,"into",E,E,10,[[],[U]]],[11,R[70],E,E,10,[[[U]],[R[2]]]],[11,R[71],E,E,10,[[],[R[2]]]],[11,R[72],E,E,10,[[["self"]],[T]]],[11,R[74],E,E,10,[[["self"]],[T]]],[11,R[73],E,E,10,[[["self"]],[R[75]]]],[11,"from",E,E,11,[[[T]],[T]]],[11,"into",E,E,11,[[],[U]]],[11,R[70],E,E,11,[[[U]],[R[2]]]],[11,R[71],E,E,11,[[],[R[2]]]],[11,R[72],E,E,11,[[["self"]],[T]]],[11,R[74],E,E,11,[[["self"]],[T]]],[11,R[73],E,E,11,[[["self"]],[R[75]]]],[11,"from",E,E,12,[[[T]],[T]]],[11,"into",E,E,12,[[],[U]]],[11,R[83],E,E,12,[[],["i"]]],[11,R[70],E,E,12,[[[U]],[R[2]]]],[11,R[71],E,E,12,[[],[R[2]]]],[11,R[72],E,E,12,[[["self"]],[T]]],[11,R[74],E,E,12,[[["self"]],[T]]],[11,R[73],E,E,12,[[["self"]],[R[75]]]],[11,R[69],E,E,13,[[["self"]],[R[4]]]],[11,"from",E,E,13,[[[T]],[T]]],[11,"into",E,E,13,[[],[U]]],[11,R[70],E,E,13,[[[U]],[R[2]]]],[11,R[71],E,E,13,[[],[R[2]]]],[11,R[72],E,E,13,[[["self"]],[T]]],[11,R[74],E,E,13,[[["self"]],[T]]],[11,R[73],E,E,13,[[["self"]],[R[75]]]],[11,R[69],R[78],E,15,[[["self"]],[R[4]]]],[11,"from",E,E,15,[[[T]],[T]]],[11,"into",E,E,15,[[],[U]]],[11,R[70],E,E,15,[[[U]],[R[2]]]],[11,R[71],E,E,15,[[],[R[2]]]],[11,R[72],E,E,15,[[["self"]],[T]]],[11,R[74],E,E,15,[[["self"]],[T]]],[11,R[73],E,E,15,[[["self"]],[R[75]]]],[11,"from",E,E,16,[[[T]],[T]]],[11,"into",E,E,16,[[],[U]]],[11,R[70],E,E,16,[[[U]],[R[2]]]],[11,R[71],E,E,16,[[],[R[2]]]],[11,R[72],E,E,16,[[["self"]],[T]]],[11,R[74],E,E,16,[[["self"]],[T]]],[11,R[73],E,E,16,[[["self"]],[R[75]]]],[11,"from",E,E,17,[[[T]],[T]]],[11,"into",E,E,17,[[],[U]]],[11,R[70],E,E,17,[[[U]],[R[2]]]],[11,R[71],E,E,17,[[],[R[2]]]],[11,R[72],E,E,17,[[["self"]],[T]]],[11,R[74],E,E,17,[[["self"]],[T]]],[11,R[73],E,E,17,[[["self"]],[R[75]]]],[11,"from",R[79],E,19,[[[T]],[T]]],[11,"into",E,E,19,[[],[U]]],[11,R[70],E,E,19,[[[U]],[R[2]]]],[11,R[71],E,E,19,[[],[R[2]]]],[11,R[72],E,E,19,[[["self"]],[T]]],[11,R[74],E,E,19,[[["self"]],[T]]],[11,R[73],E,E,19,[[["self"]],[R[75]]]],[11,R[69],E,E,20,[[["self"]],[R[4]]]],[11,"from",E,E,20,[[[T]],[T]]],[11,"into",E,E,20,[[],[U]]],[11,R[80],E,E,20,[[["self"]],[T]]],[11,R[81],E,E,20,[[[T],["self"]]]],[11,R[70],E,E,20,[[[U]],[R[2]]]],[11,R[71],E,E,20,[[],[R[2]]]],[11,R[72],E,E,20,[[["self"]],[T]]],[11,R[74],E,E,20,[[["self"]],[T]]],[11,R[73],E,E,20,[[["self"]],[R[75]]]],[11,"from",E,E,21,[[[T]],[T]]],[11,"into",E,E,21,[[],[U]]],[11,R[70],E,E,21,[[[U]],[R[2]]]],[11,R[71],E,E,21,[[],[R[2]]]],[11,R[72],E,E,21,[[["self"]],[T]]],[11,R[74],E,E,21,[[["self"]],[T]]],[11,R[73],E,E,21,[[["self"]],[R[75]]]],[11,"from",R[82],E,22,[[[T]],[T]]],[11,"into",E,E,22,[[],[U]]],[11,R[70],E,E,22,[[[U]],[R[2]]]],[11,R[71],E,E,22,[[],[R[2]]]],[11,R[72],E,E,22,[[["self"]],[T]]],[11,R[74],E,E,22,[[["self"]],[T]]],[11,R[73],E,E,22,[[["self"]],[R[75]]]],[11,"from",E,E,23,[[[T]],[T]]],[11,"into",E,E,23,[[],[U]]],[11,R[80],E,E,23,[[["self"]],[T]]],[11,R[81],E,E,23,[[[T],["self"]]]],[11,R[70],E,E,23,[[[U]],[R[2]]]],[11,R[71],E,E,23,[[],[R[2]]]],[11,R[72],E,E,23,[[["self"]],[T]]],[11,R[74],E,E,23,[[["self"]],[T]]],[11,R[73],E,E,23,[[["self"]],[R[75]]]],[11,R[69],E,E,24,[[["self"]],[R[4]]]],[11,"from",E,E,24,[[[T]],[T]]],[11,"into",E,E,24,[[],[U]]],[11,R[80],E,E,24,[[["self"]],[T]]],[11,R[81],E,E,24,[[[T],["self"]]]],[11,R[70],E,E,24,[[[U]],[R[2]]]],[11,R[71],E,E,24,[[],[R[2]]]],[11,R[72],E,E,24,[[["self"]],[T]]],[11,R[74],E,E,24,[[["self"]],[T]]],[11,R[73],E,E,24,[[["self"]],[R[75]]]],[11,"from",E,E,25,[[[T]],[T]]],[11,"into",E,E,25,[[],[U]]],[11,R[70],E,E,25,[[[U]],[R[2]]]],[11,R[71],E,E,25,[[],[R[2]]]],[11,R[72],E,E,25,[[["self"]],[T]]],[11,R[74],E,E,25,[[["self"]],[T]]],[11,R[73],E,E,25,[[["self"]],[R[75]]]],[11,"from",E,E,26,[[[T]],[T]]],[11,"into",E,E,26,[[],[U]]],[11,R[83],E,E,26,[[],["i"]]],[11,R[70],E,E,26,[[[U]],[R[2]]]],[11,R[71],E,E,26,[[],[R[2]]]],[11,R[72],E,E,26,[[["self"]],[T]]],[11,R[74],E,E,26,[[["self"]],[T]]],[11,R[73],E,E,26,[[["self"]],[R[75]]]],[11,"from",R[84],E,27,[[[T]],[T]]],[11,"into",E,E,27,[[],[U]]],[11,R[70],E,E,27,[[[U]],[R[2]]]],[11,R[71],E,E,27,[[],[R[2]]]],[11,R[72],E,E,27,[[["self"]],[T]]],[11,R[74],E,E,27,[[["self"]],[T]]],[11,R[73],E,E,27,[[["self"]],[R[75]]]],[11,"from",E,E,28,[[[T]],[T]]],[11,"into",E,E,28,[[],[U]]],[11,R[70],E,E,28,[[[U]],[R[2]]]],[11,R[71],E,E,28,[[],[R[2]]]],[11,R[72],E,E,28,[[["self"]],[T]]],[11,R[74],E,E,28,[[["self"]],[T]]],[11,R[73],E,E,28,[[["self"]],[R[75]]]],[11,"from",R[85],E,30,[[[T]],[T]]],[11,"into",E,E,30,[[],[U]]],[11,R[70],E,E,30,[[[U]],[R[2]]]],[11,R[71],E,E,30,[[],[R[2]]]],[11,R[72],E,E,30,[[["self"]],[T]]],[11,R[74],E,E,30,[[["self"]],[T]]],[11,R[73],E,E,30,[[["self"]],[R[75]]]],[11,"from",R[86],E,32,[[[T]],[T]]],[11,"into",E,E,32,[[],[U]]],[11,R[70],E,E,32,[[[U]],[R[2]]]],[11,R[71],E,E,32,[[],[R[2]]]],[11,R[72],E,E,32,[[["self"]],[T]]],[11,R[74],E,E,32,[[["self"]],[T]]],[11,R[73],E,E,32,[[["self"]],[R[75]]]],[11,"from",R[87],E,33,[[[T]],[T]]],[11,"into",E,E,33,[[],[U]]],[11,R[70],E,E,33,[[[U]],[R[2]]]],[11,R[71],E,E,33,[[],[R[2]]]],[11,R[72],E,E,33,[[["self"]],[T]]],[11,R[74],E,E,33,[[["self"]],[T]]],[11,R[73],E,E,33,[[["self"]],[R[75]]]],[11,"from",E,E,34,[[[T]],[T]]],[11,"into",E,E,34,[[],[U]]],[11,R[70],E,E,34,[[[U]],[R[2]]]],[11,R[71],E,E,34,[[],[R[2]]]],[11,R[72],E,E,34,[[["self"]],[T]]],[11,R[74],E,E,34,[[["self"]],[T]]],[11,R[73],E,E,34,[[["self"]],[R[75]]]],[11,"from",E,E,35,[[[T]],[T]]],[11,"into",E,E,35,[[],[U]]],[11,R[70],E,E,35,[[[U]],[R[2]]]],[11,R[71],E,E,35,[[],[R[2]]]],[11,R[72],E,E,35,[[["self"]],[T]]],[11,R[74],E,E,35,[[["self"]],[T]]],[11,R[73],E,E,35,[[["self"]],[R[75]]]],[11,"from",R[88],E,36,[[[T]],[T]]],[11,"into",E,E,36,[[],[U]]],[11,R[70],E,E,36,[[[U]],[R[2]]]],[11,R[71],E,E,36,[[],[R[2]]]],[11,R[72],E,E,36,[[["self"]],[T]]],[11,R[74],E,E,36,[[["self"]],[T]]],[11,R[73],E,E,36,[[["self"]],[R[75]]]],[11,"from",R[89],E,37,[[[T]],[T]]],[11,"into",E,E,37,[[],[U]]],[11,R[70],E,E,37,[[[U]],[R[2]]]],[11,R[71],E,E,37,[[],[R[2]]]],[11,R[72],E,E,37,[[["self"]],[T]]],[11,R[74],E,E,37,[[["self"]],[T]]],[11,R[73],E,E,37,[[["self"]],[R[75]]]],[11,"from",E,E,38,[[[T]],[T]]],[11,"into",E,E,38,[[],[U]]],[11,R[70],E,E,38,[[[U]],[R[2]]]],[11,R[71],E,E,38,[[],[R[2]]]],[11,R[72],E,E,38,[[["self"]],[T]]],[11,R[74],E,E,38,[[["self"]],[T]]],[11,R[73],E,E,38,[[["self"]],[R[75]]]],[11,"from",R[90],E,39,[[[T]],[T]]],[11,"into",E,E,39,[[],[U]]],[11,R[70],E,E,39,[[[U]],[R[2]]]],[11,R[71],E,E,39,[[],[R[2]]]],[11,R[72],E,E,39,[[["self"]],[T]]],[11,R[74],E,E,39,[[["self"]],[T]]],[11,R[73],E,E,39,[[["self"]],[R[75]]]],[11,"from",R[91],E,41,[[[T]],[T]]],[11,"into",E,E,41,[[],[U]]],[11,R[70],E,E,41,[[[U]],[R[2]]]],[11,R[71],E,E,41,[[],[R[2]]]],[11,R[72],E,E,41,[[["self"]],[T]]],[11,R[74],E,E,41,[[["self"]],[T]]],[11,R[73],E,E,41,[[["self"]],[R[75]]]],[11,"from",R[92],E,42,[[[T]],[T]]],[11,"into",E,E,42,[[],[U]]],[11,R[70],E,E,42,[[[U]],[R[2]]]],[11,R[71],E,E,42,[[],[R[2]]]],[11,R[72],E,E,42,[[["self"]],[T]]],[11,R[74],E,E,42,[[["self"]],[T]]],[11,R[73],E,E,42,[[["self"]],[R[75]]]],[11,"from",R[93],E,43,[[[T]],[T]]],[11,"into",E,E,43,[[],[U]]],[11,R[70],E,E,43,[[[U]],[R[2]]]],[11,R[71],E,E,43,[[],[R[2]]]],[11,R[72],E,E,43,[[["self"]],[T]]],[11,R[74],E,E,43,[[["self"]],[T]]],[11,R[73],E,E,43,[[["self"]],[R[75]]]],[11,R[94],E,E,43,[[]]],[11,"from",E,E,44,[[[T]],[T]]],[11,"into",E,E,44,[[],[U]]],[11,R[70],E,E,44,[[[U]],[R[2]]]],[11,R[71],E,E,44,[[],[R[2]]]],[11,R[72],E,E,44,[[["self"]],[T]]],[11,R[74],E,E,44,[[["self"]],[T]]],[11,R[73],E,E,44,[[["self"]],[R[75]]]],[11,R[94],E,E,44,[[]]],[11,"from",E,E,45,[[[T]],[T]]],[11,"into",E,E,45,[[],[U]]],[11,R[70],E,E,45,[[[U]],[R[2]]]],[11,R[71],E,E,45,[[],[R[2]]]],[11,R[72],E,E,45,[[["self"]],[T]]],[11,R[74],E,E,45,[[["self"]],[T]]],[11,R[73],E,E,45,[[["self"]],[R[75]]]],[11,R[94],E,E,45,[[]]],[11,"from",E,E,46,[[[T]],[T]]],[11,"into",E,E,46,[[],[U]]],[11,R[70],E,E,46,[[[U]],[R[2]]]],[11,R[71],E,E,46,[[],[R[2]]]],[11,R[72],E,E,46,[[["self"]],[T]]],[11,R[74],E,E,46,[[["self"]],[T]]],[11,R[73],E,E,46,[[["self"]],[R[75]]]],[11,R[94],E,E,46,[[]]],[11,"from",E,E,47,[[[T]],[T]]],[11,"into",E,E,47,[[],[U]]],[11,R[70],E,E,47,[[[U]],[R[2]]]],[11,R[71],E,E,47,[[],[R[2]]]],[11,R[72],E,E,47,[[["self"]],[T]]],[11,R[74],E,E,47,[[["self"]],[T]]],[11,R[73],E,E,47,[[["self"]],[R[75]]]],[11,R[94],E,E,47,[[]]],[11,"from",E,E,48,[[[T]],[T]]],[11,"into",E,E,48,[[],[U]]],[11,R[70],E,E,48,[[[U]],[R[2]]]],[11,R[71],E,E,48,[[],[R[2]]]],[11,R[72],E,E,48,[[["self"]],[T]]],[11,R[74],E,E,48,[[["self"]],[T]]],[11,R[73],E,E,48,[[["self"]],[R[75]]]],[11,R[94],E,E,48,[[]]],[11,"from",E,E,49,[[[T]],[T]]],[11,"into",E,E,49,[[],[U]]],[11,R[70],E,E,49,[[[U]],[R[2]]]],[11,R[71],E,E,49,[[],[R[2]]]],[11,R[72],E,E,49,[[["self"]],[T]]],[11,R[74],E,E,49,[[["self"]],[T]]],[11,R[73],E,E,49,[[["self"]],[R[75]]]],[11,R[94],E,E,49,[[]]],[11,R[15],R[79],E,21,[[["self"]],["u32"]]],[11,R[29],E,E,21,[[["self"]],["str"]]],[11,R[95],E,E,21,[[["self"]],["vec"]]],[11,R[30],E,E,21,[[["self"],["i32"]]]],[11,R[19],E,E,21,[[["self"],["i32"]],[R[5]]]],[11,R[96],E,E,21,[[["u32"],[R[13]],["i32"],[R[5]],["self"]]]],[11,R[97],E,E,21,[[["value"],["self"]]]],[11,R[31],E,E,21,[[["self"],[R[5]],["i32"]],[R[4]]]],[11,R[15],R[82],E,25,[[["self"]],["u32"]]],[11,R[29],E,E,25,[[["self"]],["str"]]],[11,R[95],E,E,25,[[["self"]],["vec"]]],[11,R[30],E,E,25,[[["self"],["i32"]]]],[11,R[19],E,E,25,[[["self"],["i32"]],[R[5]]]],[11,R[96],E,E,25,[[["u32"],[R[13]],["i32"],[R[5]],["self"]]]],[11,R[97],E,E,25,[[["value"],["self"]]]],[11,R[31],E,E,25,[[["self"],[R[5]],["i32"]],[R[4]]]],[11,R[98],R[84],E,27,[[["value"],["str"],["rc",[R[28]]],[R[28]]],["self"]]],[11,R[48],E,E,27,[[["self"]],[["rc",[R[28]]],[R[28]]]]],[11,R[29],E,E,27,[[["self"]],["str"]]],[11,R[19],E,E,27,[[["self"],["i32"]],[R[5]]]],[11,R[34],E,E,27,[[["self"]],["i32"]]],[11,R[99],E,E,27,[[["u32"],[R[13]],["i32"],[R[5]],["self"]]]],[11,R[31],E,E,27,[[["self"],[R[5]],["i32"]],[R[4]]]],[11,R[98],E,E,28,[[["value"],["str"],["rc",[R[28]]],[R[28]]],["self"]]],[11,R[48],E,E,28,[[["self"]],[["rc",[R[28]]],[R[28]]]]],[11,R[29],E,E,28,[[["self"]],["str"]]],[11,R[34],E,E,28,[[["self"]],["i32"]]],[11,R[30],E,E,28,[[["self"],["i32"]]]],[11,R[19],E,E,28,[[["self"],["i32"]],[R[5]]]],[11,R[99],E,E,28,[[["u32"],[R[13]],["i32"],[R[5]],["self"]]]],[11,R[31],E,E,28,[[["self"],[R[5]],["i32"]],[R[4]]]],[11,R[29],R[86],E,32,[[["self"]],["str"]]],[11,R[48],E,E,32,[[["self"]],[["rc",[R[28]]],[R[28]]]]],[11,R[34],E,E,32,[[["self"]],["i32"]]],[11,R[30],E,E,32,[[["self"],["i32"]]]],[11,R[19],E,E,32,[[["self"],["i32"]],[R[5]]]],[11,R[31],E,E,32,[[["self"],[R[5]],["i32"]],[R[4]]]],[11,R[99],E,E,32,[[["u32"],[R[13]],["i32"],[R[5]],["self"]]]],[11,R[98],E,E,32,[[["value"],["str"],["rc",[R[28]]],[R[28]]],["self"]]],[11,R[29],R[87],E,35,[[["self"]],["str"]]],[11,R[48],E,E,35,[[["self"]],[["rc",[R[28]]],[R[28]]]]],[11,R[34],E,E,35,[[["self"]],["i32"]]],[11,R[19],E,E,35,[[["self"],["i32"]],[R[5]]]],[11,R[31],E,E,35,[[["self"],[R[5]],["i32"]],[R[4]]]],[11,R[99],E,E,35,[[["u32"],[R[13]],["i32"],[R[5]],["self"]]]],[11,R[98],E,E,35,[[["value"],["str"],["rc",[R[28]]],[R[28]]],["self"]]],[11,R[48],R[89],E,38,[[["self"]],[["rc",[R[28]]],[R[28]]]]],[11,R[34],E,E,38,[[["self"]],["i32"]]],[11,R[29],E,E,38,[[["self"]],["str"]]],[11,R[30],E,E,38,[[["self"],["i32"]]]],[11,R[19],E,E,38,[[["self"],["i32"]],[R[5]]]],[11,R[99],E,E,38,[[["u32"],[R[13]],["i32"],[R[5]],["self"]]]],[11,R[31],E,E,38,[[["self"],[R[5]],["i32"]],[R[4]]]],[11,R[98],E,E,38,[[["value"],["str"],["rc",[R[28]]],[R[28]]],["self"]]],[11,R[100],R[85],E,30,[[["self"]],["rc"]]],[11,R[101],E,E,30,[[["self"]],["rc"]]],[11,R[102],E,E,30,[[["u32"],[R[13]],["i32"],[R[5]],["self"]]]],[11,R[106],E,E,30,[[["self"]],[[R[36],["i32"]],["i32"]]]],[11,R[103],E,E,30,[[["self"]],["i32"]]],[11,R[104],E,E,30,[[[R[35]],["i32"],["self"],[R[36]]]]],[11,R[105],E,E,30,[[["self"],["i32"]],[[R[51],[R[35]]],[R[35]]]]],[11,R[100],R[88],E,36,[[["self"]],[["rc",[R[43]]],[R[43]]]]],[11,R[101],E,E,36,[[["self"]],["rc"]]],[11,R[103],E,E,36,[[["self"]],["i32"]]],[11,R[102],E,E,36,[[["u32"],[R[13]],["i32"],[R[5]],["self"]]]],[11,R[106],E,E,36,[[["self"]],[[R[36],["i32"]],["i32"]]]],[11,R[104],E,E,36,[[[R[35]],["i32"],["self"],[R[36]]]]],[11,R[105],E,E,36,[[["self"],["i32"]],[[R[51],[R[35]]],[R[35]]]]],[11,R[48],R[90],E,39,[[["self"]],[["rc",[R[28]]],[R[28]]]]],[11,R[53],E,E,39,[[["self"],["u32"]],[["rc",[R[107]]],[R[107]]]]],[11,R[34],E,E,39,[[["self"]],["i32"]]],[11,R[108],E,E,39,[[["self"],["u32"]],["zerohomomorphism"]]],[11,R[109],E,E,39,[[["self"],["u32"],["i32"]]]],[11,R[48],R[91],E,41,[[["self"]],[["rc",[R[28]]],[R[28]]]]],[11,R[53],E,E,41,[[["self"],["u32"]],[["rc",[R[43]]],[R[43]]]]],[11,R[34],E,E,41,[[["self"]],["i32"]]],[11,R[108],E,E,41,[[["self"],["u32"]],[R[54]]]],[11,R[109],E,E,41,[[["self"],["u32"],["i32"]]]],[11,R[110],R[77],E,13,[[["self"],[R[5]]]]],[11,R[111],E,E,13,[[["self"]],[R[12]]]],[11,R[112],E,E,13,[[["self"]],[R[12]]]],[11,R[15],E,E,13,[[["self"]],["u32"]]],[11,R[19],E,E,13,[[["self"]],[R[5]]]],[11,R[113],E,E,13,[[["self"]],[R[5]]]],[11,R[114],E,E,13,[[["self"]],[R[5]]]],[11,R[115],E,E,13,[[["self"]]]],[11,R[16],E,E,13,[[["self"],[R[5]]]]],[11,R[116],E,E,13,[[["self"]]]],[11,R[17],E,E,13,[[["self"]]]],[11,R[117],E,E,13,[[["self"]],[R[5]]]],[11,R[118],E,E,13,[[["self"]],[R[5]]]],[11,R[119],E,E,13,[[["self"]],["vec"]]],[11,R[120],E,E,13,[[["self"]],["vec"]]],[11,R[121],E,E,13,[[["self"],[R[5]]],["u64"]]],[11,R[122],E,E,13,[[["self"]]]],[11,"assign",E,E,13,[[["self"],[R[13]]]]],[11,"is_zero",E,E,13,[[["self"]],["bool"]]],[11,R[123],E,E,13,[[["self"],[R[5]]],["u32"]]],[11,R[124],E,E,13,[[["self"],["u32"],[R[5]]]]],[11,R[125],E,E,13,[[["self"],["u32"],[R[5]]]]],[11,"unpack",E,E,13,[[["self"]]]],[11,"pack",E,E,13,[[["self"]]]],[11,"add",E,E,13,[[["self"],["u32"],[R[13]]]]],[11,"scale",E,E,13,[[["self"],["u32"]]]],[11,R[110],E,E,8,[[["self"],[R[5]]]]],[11,R[15],E,E,8,[[["self"]],["u32"]]],[11,R[111],E,E,8,[[["self"]],[R[12]]]],[11,R[112],E,E,8,[[["self"]],[R[12]]]],[11,R[110],E,E,9,[[["self"],[R[5]]]]],[11,R[15],E,E,9,[[["self"]],["u32"]]],[11,R[111],E,E,9,[[["self"]],[R[12]]]],[11,R[112],E,E,9,[[["self"]],[R[12]]]],[11,R[110],E,E,10,[[["self"],[R[5]]]]],[11,R[15],E,E,10,[[["self"]],["u32"]]],[11,R[111],E,E,10,[[["self"]],[R[12]]]],[11,R[112],E,E,10,[[["self"]],[R[12]]]],[11,R[110],E,E,11,[[["self"],[R[5]]]]],[11,R[15],E,E,11,[[["self"]],["u32"]]],[11,R[111],E,E,11,[[["self"]],[R[12]]]],[11,R[112],E,E,11,[[["self"]],[R[12]]]],[11,"default",R[82],E,23,[[],["qpart"]]],[11,"next",R[77],E,12,[[["self"]],[R[51]]]],[11,"next",R[82],E,26,[[["self"]],[R[51]]]],[11,"clone",R[77],E,6,[[["self"]],[R[126]]]],[11,"clone",R[79],E,20,[[["self"]],[R[20]]]],[11,"clone",R[82],E,23,[[["self"]],["qpart"]]],[11,"clone",E,E,24,[[["self"]],[R[26]]]],[11,"from",R[77],E,13,[[["fpvector2"]],[R[13]]]],[11,"from",E,E,13,[[["fpvector3"]],[R[13]]]],[11,"from",E,E,13,[[["fpvector5"]],[R[13]]]],[11,"from",E,E,13,[[["fpvectorgeneric"]],[R[13]]]],[11,"assert_receiver_is_total_eq",R[78],E,15,[[["self"]]]],[11,"eq",R[77],E,13,[[["self"]],["bool"]]],[11,"eq",R[78],E,15,[[["self"],[R[39]]],["bool"]]],[11,"ne",E,E,15,[[["self"],[R[39]]],["bool"]]],[11,"eq",R[79],E,20,[[["self"]],["bool"]]],[11,"eq",R[82],E,24,[[["self"]],["bool"]]],[11,"deref_mut",R[78],E,15,[[["self"]]]],[11,"fmt",R[77],E,13,[[["self"],[R[127]]],[R[2]]]],[11,"fmt",E,E,7,[[["self"],[R[127]]],[R[2]]]],[11,"fmt",E,E,8,[[["self"],[R[127]]],[R[2]]]],[11,"fmt",E,E,9,[[["self"],[R[127]]],[R[2]]]],[11,"fmt",E,E,10,[[["self"],[R[127]]],[R[2]]]],[11,"fmt",E,E,11,[[["self"],[R[127]]],[R[2]]]],[11,"fmt",R[78],E,15,[[["self"],[R[127]]],[[R[2],["error"]],["error"]]]],[11,"fmt",E,E,16,[[["self"],[R[127]]],[R[2]]]],[11,"fmt",R[79],E,20,[[["self"],[R[127]]],[R[2]]]],[11,"fmt",R[82],E,24,[[["self"],[R[127]]],[R[2]]]],[11,"fmt",R[87],E,33,[[["self"],[R[127]]],[R[2]]]],[11,"fmt",R[6],E,0,[[["self"],[R[127]]],[R[2]]]],[11,"fmt",E,E,1,[[["self"],[R[127]]],[R[2]]]],[11,"fmt",R[77],E,13,[[["self"],[R[127]]],[[R[2],["error"]],["error"]]]],[11,"fmt",R[78],E,15,[[["self"],[R[127]]],[[R[2],["error"]],["error"]]]],[11,"fmt",R[79],E,20,[[[R[127]],["self"]],[[R[2],["error"]],["error"]]]],[11,"fmt",R[82],E,24,[[[R[127]],["self"]],[[R[2],["error"]],["error"]]]],[11,"fmt",R[6],E,0,[[[R[127]],["self"]],[R[2]]]],[11,"fmt",E,E,1,[[[R[127]],["self"]],[R[2]]]],[11,"deref",R[78],E,15,[[["self"]]]],[11,"deref",R[79],E,19,[[["self"]],["vec"]]],[11,"index",R[76],E,5,[[["self"],[R[5]]],[T]]],[11,"index",R[78],E,15,[[["self"],[R[5]]]]],[11,"index_mut",E,E,15,[[["self"],[R[5]]]]],[11,"hash",R[79],E,20,[[["self"],["h"]]]],[11,"hash",R[82],E,24,[[["self"],["h"]]]],[11,R[128],R[6],E,0,[[["self"]],["str"]]],[11,R[128],E,E,1,[[["self"]],["str"]]],[11,"initialize",R[79],E,19,[[["self"]]]],[11,R[129],R[93],E,43,[[["u32"]],["self"]]],[11,R[129],E,E,44,[[["u32"]],["self"]]],[11,R[129],E,E,45,[[["u32"]],["self"]]],[11,R[129],E,E,46,[[["u32"]],["self"]]],[11,R[129],E,E,47,[[["u32"]],["self"]]],[11,R[129],E,E,48,[[["u32"]],["self"]]],[11,R[129],E,E,49,[[["u32"]],["self"]]],[11,R[130],E,E,43,[[]]],[11,R[130],E,E,44,[[]]],[11,R[130],E,E,45,[[]]],[11,R[130],E,E,46,[[]]],[11,R[130],E,E,47,[[]]],[11,R[130],E,E,48,[[]]],[11,R[130],E,E,49,[[]]],[11,R[131],E,E,43,[[]]],[11,R[131],E,E,44,[[]]],[11,R[131],E,E,45,[[]]],[11,R[131],E,E,46,[[]]],[11,R[131],E,E,47,[[]]],[11,R[131],E,E,48,[[]]],[11,R[131],E,E,49,[[]]],[11,R[132],E,E,43,[[],["u32"]]],[11,R[132],E,E,44,[[],["u32"]]],[11,R[132],E,E,45,[[],["u32"]]],[11,R[132],E,E,46,[[],["u32"]]],[11,R[132],E,E,47,[[],["u32"]]],[11,R[132],E,E,48,[[],["u32"]]],[11,R[132],E,E,49,[[],["u32"]]],[11,R[133],E,E,43,[[],["bool"]]],[11,R[133],E,E,44,[[],["bool"]]],[11,R[133],E,E,45,[[],["bool"]]],[11,R[133],E,E,46,[[],["bool"]]],[11,R[133],E,E,47,[[],["bool"]]],[11,R[133],E,E,48,[[],["bool"]]],[11,R[133],E,E,49,[[],["bool"]]],[11,"none",E,E,43,[[]]],[11,"none",E,E,44,[[]]],[11,"none",E,E,45,[[]]],[11,"none",E,E,46,[[]]],[11,"none",E,E,47,[[]]],[11,"none",E,E,48,[[]]],[11,"none",E,E,49,[[]]],[11,R[134],E,E,43,[[]]],[11,R[134],E,E,44,[[]]],[11,R[134],E,E,45,[[]]],[11,R[134],E,E,46,[[]]],[11,R[134],E,E,47,[[]]],[11,R[134],E,E,48,[[]]],[11,R[134],E,E,49,[[]]]],"p":[[3,R[135]],[3,R[136]],[3,R[137]],[3,"Config"],[4,R[138]],[3,"OnceVec"],[3,R[139]],[3,R[140]],[3,R[8]],[3,R[9]],[3,R[10]],[3,R[11]],[3,R[141]],[4,"FpVector"],[8,R[142]],[3,"Matrix"],[3,"Subspace"],[3,R[143]],[8,"Algebra"],[3,R[22]],[3,R[144]],[3,R[145]],[3,R[146]],[3,"QPart"],[3,R[147]],[3,R[148]],[3,R[149]],[3,R[150]],[4,R[151]],[8,"Module"],[3,R[152]],[8,R[153]],[3,R[154]],[3,R[155]],[3,R[156]],[3,R[157]],[3,R[158]],[3,R[159]],[3,R[160]],[3,R[161]],[8,R[162]],[3,R[163]],[3,R[164]],[3,R[165]],[3,R[166]],[3,R[167]],[3,R[168]],[3,R[169]],[3,R[170]],[3,R[171]]]};
initSearch(searchIndex);addSearchOptions(searchIndex);